
waijung-matlab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800546c  0800546c  0000646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005518  08005518  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005520  08005520  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005520  08005520  00006520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005524  08005524  00006524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005528  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  2000000c  08005534  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  08005534  00007800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c1a  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4b  00000000  00000000  0001bc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d55  00000000  00000000  0001f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d0b  00000000  00000000  00020625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001524b  00000000  00000000  00047330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb8cd  00000000  00000000  0005c57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000479c  00000000  00000000  00157e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005454 	.word	0x08005454

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005454 	.word	0x08005454

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800054a:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <MX_DMA_Init+0x60>)
 800054c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800054e:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6493      	str	r3, [r2, #72]	@ 0x48
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000566:	4a0f      	ldr	r2, [pc, #60]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6493      	str	r3, [r2, #72]	@ 0x48
 800056e:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	200b      	movs	r0, #11
 8000580:	f000 ff0b 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000584:	200b      	movs	r0, #11
 8000586:	f000 ff22 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	200c      	movs	r0, #12
 8000590:	f000 ff03 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000594:	200c      	movs	r0, #12
 8000596:	f000 ff1a 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b2f      	ldr	r3, [pc, #188]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a28      	ldr	r2, [pc, #160]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005dc:	f043 0320 	orr.w	r3, r3, #32
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e2:	4b26      	ldr	r3, [pc, #152]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	4a22      	ldr	r2, [pc, #136]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <MX_GPIO_Init+0xd4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <MX_GPIO_Init+0xd4>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_GPIO_Init+0xd4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000626:	f001 fba1 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000630:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <MX_GPIO_Init+0xd8>)
 8000642:	f001 fa11 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000646:	2320      	movs	r3, #32
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000660:	f001 fa02 	bl	8001a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2028      	movs	r0, #40	@ 0x28
 800066a:	f000 fe96 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066e:	2028      	movs	r0, #40	@ 0x28
 8000670:	f000 fead 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	@ 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	48000800 	.word	0x48000800

08000684 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000688:	f000 fd3b 	bl	8001102 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800068c:	f000 f894 	bl	80007b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000690:	f7ff ff8a 	bl	80005a8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000694:	f7ff ff56 	bl	8000544 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 8000698:	f000 fc04 	bl	8000ea4 <MX_LPUART1_UART_Init>
	MX_TIM2_Init();
 800069c:	f000 fb90 	bl	8000dc0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
//	HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, 20);
//	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 20);
	SerialFrame_Init(&serial_frame, &hlpuart1, 37, 'N');
 80006a0:	234e      	movs	r3, #78	@ 0x4e
 80006a2:	2225      	movs	r2, #37	@ 0x25
 80006a4:	4929      	ldr	r1, [pc, #164]	@ (800074c <main+0xc8>)
 80006a6:	482a      	ldr	r0, [pc, #168]	@ (8000750 <main+0xcc>)
 80006a8:	f000 f904 	bl	80008b4 <SerialFrame_Init>

	SerialFrame_AddTxField(&serial_frame, SERIAL_TYPE_FLOAT, &dum_float1,
 80006ac:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <main+0xd0>)
 80006ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000758 <main+0xd4>)
 80006b0:	2106      	movs	r1, #6
 80006b2:	4827      	ldr	r0, [pc, #156]	@ (8000750 <main+0xcc>)
 80006b4:	f000 f966 	bl	8000984 <SerialFrame_AddTxField>
			"Float1");
	SerialFrame_AddTxField(&serial_frame, SERIAL_TYPE_FLOAT, &dum_float2,
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <main+0xd8>)
 80006ba:	4a29      	ldr	r2, [pc, #164]	@ (8000760 <main+0xdc>)
 80006bc:	2106      	movs	r1, #6
 80006be:	4824      	ldr	r0, [pc, #144]	@ (8000750 <main+0xcc>)
 80006c0:	f000 f960 	bl	8000984 <SerialFrame_AddTxField>
			"Float2");
	SerialFrame_AddTxField(&serial_frame, SERIAL_TYPE_FLOAT, &dum_float3,
 80006c4:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <main+0xe0>)
 80006c6:	4a28      	ldr	r2, [pc, #160]	@ (8000768 <main+0xe4>)
 80006c8:	2106      	movs	r1, #6
 80006ca:	4821      	ldr	r0, [pc, #132]	@ (8000750 <main+0xcc>)
 80006cc:	f000 f95a 	bl	8000984 <SerialFrame_AddTxField>
			"Float3");
	SerialFrame_AddTxField(&serial_frame, SERIAL_TYPE_INT16, &dum_int1, "Int1");
 80006d0:	4b26      	ldr	r3, [pc, #152]	@ (800076c <main+0xe8>)
 80006d2:	4a27      	ldr	r2, [pc, #156]	@ (8000770 <main+0xec>)
 80006d4:	2103      	movs	r1, #3
 80006d6:	481e      	ldr	r0, [pc, #120]	@ (8000750 <main+0xcc>)
 80006d8:	f000 f954 	bl	8000984 <SerialFrame_AddTxField>
	SerialFrame_AddTxField(&serial_frame, SERIAL_TYPE_INT16, &dum_int2, "Int2");
 80006dc:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <main+0xf0>)
 80006de:	4a26      	ldr	r2, [pc, #152]	@ (8000778 <main+0xf4>)
 80006e0:	2103      	movs	r1, #3
 80006e2:	481b      	ldr	r0, [pc, #108]	@ (8000750 <main+0xcc>)
 80006e4:	f000 f94e 	bl	8000984 <SerialFrame_AddTxField>
	SerialFrame_AddTxField(&serial_frame, SERIAL_TYPE_INT16, &dum_int3, "Int3");
 80006e8:	4b24      	ldr	r3, [pc, #144]	@ (800077c <main+0xf8>)
 80006ea:	4a25      	ldr	r2, [pc, #148]	@ (8000780 <main+0xfc>)
 80006ec:	2103      	movs	r1, #3
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <main+0xcc>)
 80006f0:	f000 f948 	bl	8000984 <SerialFrame_AddTxField>

	// Add receive fields
	SerialFrame_AddRxField(&serial_frame, SERIAL_TYPE_FLOAT, &rev_float1,
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <main+0x100>)
 80006f6:	4a24      	ldr	r2, [pc, #144]	@ (8000788 <main+0x104>)
 80006f8:	2106      	movs	r1, #6
 80006fa:	4815      	ldr	r0, [pc, #84]	@ (8000750 <main+0xcc>)
 80006fc:	f000 f9ba 	bl	8000a74 <SerialFrame_AddRxField>
			"RevFloat1");
	SerialFrame_AddRxField(&serial_frame, SERIAL_TYPE_FLOAT, &rev_float2,
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <main+0x108>)
 8000702:	4a23      	ldr	r2, [pc, #140]	@ (8000790 <main+0x10c>)
 8000704:	2106      	movs	r1, #6
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <main+0xcc>)
 8000708:	f000 f9b4 	bl	8000a74 <SerialFrame_AddRxField>
			"RevFloat2");
	SerialFrame_AddRxField(&serial_frame, SERIAL_TYPE_FLOAT, &rev_float3,
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <main+0x110>)
 800070e:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <main+0x114>)
 8000710:	2106      	movs	r1, #6
 8000712:	480f      	ldr	r0, [pc, #60]	@ (8000750 <main+0xcc>)
 8000714:	f000 f9ae 	bl	8000a74 <SerialFrame_AddRxField>
			"RevFloat3");
	SerialFrame_AddRxField(&serial_frame, SERIAL_TYPE_INT16, &rev_int1,
 8000718:	4b20      	ldr	r3, [pc, #128]	@ (800079c <main+0x118>)
 800071a:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <main+0x11c>)
 800071c:	2103      	movs	r1, #3
 800071e:	480c      	ldr	r0, [pc, #48]	@ (8000750 <main+0xcc>)
 8000720:	f000 f9a8 	bl	8000a74 <SerialFrame_AddRxField>
			"RevInt1");
	SerialFrame_AddRxField(&serial_frame, SERIAL_TYPE_INT16, &rev_int2,
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <main+0x120>)
 8000726:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <main+0x124>)
 8000728:	2103      	movs	r1, #3
 800072a:	4809      	ldr	r0, [pc, #36]	@ (8000750 <main+0xcc>)
 800072c:	f000 f9a2 	bl	8000a74 <SerialFrame_AddRxField>
			"RevInt2");
	SerialFrame_AddRxField(&serial_frame, SERIAL_TYPE_INT16, &rev_int3,
 8000730:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <main+0x128>)
 8000732:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <main+0x12c>)
 8000734:	2103      	movs	r1, #3
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <main+0xcc>)
 8000738:	f000 f99c 	bl	8000a74 <SerialFrame_AddRxField>
			"RevInt3");

	SerialFrame_StartReceive(&serial_frame);
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <main+0xcc>)
 800073e:	f000 fa95 	bl	8000c6c <SerialFrame_StartReceive>

	HAL_TIM_Base_Start_IT(&htim2);
 8000742:	481c      	ldr	r0, [pc, #112]	@ (80007b4 <main+0x130>)
 8000744:	f002 fbd6 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <main+0xc4>
 800074c:	200006a8 	.word	0x200006a8
 8000750:	20000050 	.word	0x20000050
 8000754:	0800546c 	.word	0x0800546c
 8000758:	20000028 	.word	0x20000028
 800075c:	08005474 	.word	0x08005474
 8000760:	2000002c 	.word	0x2000002c
 8000764:	0800547c 	.word	0x0800547c
 8000768:	20000030 	.word	0x20000030
 800076c:	08005484 	.word	0x08005484
 8000770:	20000034 	.word	0x20000034
 8000774:	0800548c 	.word	0x0800548c
 8000778:	20000036 	.word	0x20000036
 800077c:	08005494 	.word	0x08005494
 8000780:	20000038 	.word	0x20000038
 8000784:	0800549c 	.word	0x0800549c
 8000788:	2000003c 	.word	0x2000003c
 800078c:	080054a8 	.word	0x080054a8
 8000790:	20000040 	.word	0x20000040
 8000794:	080054b4 	.word	0x080054b4
 8000798:	20000044 	.word	0x20000044
 800079c:	080054c0 	.word	0x080054c0
 80007a0:	20000048 	.word	0x20000048
 80007a4:	080054c8 	.word	0x080054c8
 80007a8:	2000004a 	.word	0x2000004a
 80007ac:	080054d0 	.word	0x080054d0
 80007b0:	2000004c 	.word	0x2000004c
 80007b4:	2000065c 	.word	0x2000065c

080007b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	@ 0x50
 80007bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	2238      	movs	r2, #56	@ 0x38
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fe0a 	bl	80053e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007da:	2000      	movs	r0, #0
 80007dc:	f001 fb02 	bl	8001de4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ea:	2340      	movs	r3, #64	@ 0x40
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80007fa:	2355      	movs	r3, #85	@ 0x55
 80007fc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fb9c 	bl	8001f4c <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x66>
		Error_Handler();
 800081a:	f000 f845 	bl	80008a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2303      	movs	r3, #3
 8000824:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2104      	movs	r1, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fe9a 	bl	8002570 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x8e>
		Error_Handler();
 8000842:	f000 f831 	bl	80008a8 <Error_Handler>
	}
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	@ 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d105      	bne.n	800086c <HAL_TIM_PeriodElapsedCallback+0x1c>
//		memcpy(&TxBuffer[15], &dum_int2, sizeof(int16_t)); /* 15 – 16       */
//		memcpy(&TxBuffer[17], &dum_int3, sizeof(int16_t)); /* 17 – 18       */
//		TxBuffer[19] = 'N'; /* terminator    */
//
//		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, TX_LEN);
		SerialFrame_BuildTxFrame(&serial_frame);
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000862:	f000 f983 	bl	8000b6c <SerialFrame_BuildTxFrame>
		SerialFrame_Transmit(&serial_frame);
 8000866:	4804      	ldr	r0, [pc, #16]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000868:	f000 f9ec 	bl	8000c44 <SerialFrame_Transmit>
	}
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000065c 	.word	0x2000065c
 8000878:	20000050 	.word	0x20000050

0800087c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

	if (huart == &hlpuart1) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <HAL_UART_RxCpltCallback+0x24>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d105      	bne.n	8000898 <HAL_UART_RxCpltCallback+0x1c>
//			memcpy(&rev_int3, &RxBuffer[17], sizeof(int16_t));
//		}
//
//		HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, RX_LEN);
		// Parse received frame
		SerialFrame_ParseRxFrame(&serial_frame);
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <HAL_UART_RxCpltCallback+0x28>)
 800088e:	f000 f9a7 	bl	8000be0 <SerialFrame_ParseRxFrame>

		// Start receiving again
		SerialFrame_StartReceive(&serial_frame);
 8000892:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <HAL_UART_RxCpltCallback+0x28>)
 8000894:	f000 f9ea 	bl	8000c6c <SerialFrame_StartReceive>
	}
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200006a8 	.word	0x200006a8
 80008a4:	20000050 	.word	0x20000050

080008a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <SerialFrame_Init>:

#include "serial_frame.h"
#include <stdlib.h>

/* Initialize serial frame */
void SerialFrame_Init(SerialFrame *frame, UART_HandleTypeDef *huart, uint8_t header, uint8_t terminator) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	460b      	mov	r3, r1
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	4613      	mov	r3, r2
 80008c8:	71bb      	strb	r3, [r7, #6]
    frame->huart = huart;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	f8c3 2604 	str.w	r2, [r3, #1540]	@ 0x604
    frame->tx_field_count = 0;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
    frame->rx_field_count = 0;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
    frame->tx_frame_size = 2; // Header + Terminator
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2202      	movs	r2, #2
 80008e6:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
    frame->rx_frame_size = 2; // Header + Terminator
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2202      	movs	r2, #2
 80008ee:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
    frame->header = header;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	f883 2608 	strb.w	r2, [r3, #1544]	@ 0x608
    frame->terminator = terminator;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	79ba      	ldrb	r2, [r7, #6]
 80008fe:	f883 2609 	strb.w	r2, [r3, #1545]	@ 0x609

    memset(frame->tx_buffer, 0, SERIAL_FRAME_MAX_SIZE);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8000908:	22ff      	movs	r2, #255	@ 0xff
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fd67 	bl	80053e0 <memset>
    memset(frame->rx_buffer, 0, SERIAL_FRAME_MAX_SIZE);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f203 5303 	addw	r3, r3, #1283	@ 0x503
 8000918:	22ff      	movs	r2, #255	@ 0xff
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f004 fd5f 	bl	80053e0 <memset>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <SerialFrame_GetDataSize>:

/* Get size of data type */
uint8_t SerialFrame_GetDataSize(SerialFrameDataType type) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b07      	cmp	r3, #7
 800093a:	d81b      	bhi.n	8000974 <SerialFrame_GetDataSize+0x48>
 800093c:	a201      	add	r2, pc, #4	@ (adr r2, 8000944 <SerialFrame_GetDataSize+0x18>)
 800093e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000942:	bf00      	nop
 8000944:	08000965 	.word	0x08000965
 8000948:	08000965 	.word	0x08000965
 800094c:	08000969 	.word	0x08000969
 8000950:	08000969 	.word	0x08000969
 8000954:	0800096d 	.word	0x0800096d
 8000958:	0800096d 	.word	0x0800096d
 800095c:	0800096d 	.word	0x0800096d
 8000960:	08000971 	.word	0x08000971
        case SERIAL_TYPE_UINT8:
        case SERIAL_TYPE_INT8:
            return 1;
 8000964:	2301      	movs	r3, #1
 8000966:	e006      	b.n	8000976 <SerialFrame_GetDataSize+0x4a>
        case SERIAL_TYPE_UINT16:
        case SERIAL_TYPE_INT16:
            return 2;
 8000968:	2302      	movs	r3, #2
 800096a:	e004      	b.n	8000976 <SerialFrame_GetDataSize+0x4a>
        case SERIAL_TYPE_UINT32:
        case SERIAL_TYPE_INT32:
        case SERIAL_TYPE_FLOAT:
            return 4;
 800096c:	2304      	movs	r3, #4
 800096e:	e002      	b.n	8000976 <SerialFrame_GetDataSize+0x4a>
        case SERIAL_TYPE_DOUBLE:
            return 8;
 8000970:	2308      	movs	r3, #8
 8000972:	e000      	b.n	8000976 <SerialFrame_GetDataSize+0x4a>
        default:
            return 0;
 8000974:	2300      	movs	r3, #0
    }
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <SerialFrame_AddTxField>:

/* Add transmit field */
int SerialFrame_AddTxField(SerialFrame *frame, SerialFrameDataType type, void *data_ptr, const char *name) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	460b      	mov	r3, r1
 8000992:	72fb      	strb	r3, [r7, #11]
    if (frame->tx_field_count >= SERIAL_FRAME_MAX_FIELDS) {
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 800099a:	2b1f      	cmp	r3, #31
 800099c:	d902      	bls.n	80009a4 <SerialFrame_AddTxField+0x20>
        return -1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e063      	b.n	8000a6c <SerialFrame_AddTxField+0xe8>
    }

    SerialFrameField *field = &frame->tx_fields[frame->tx_field_count];
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
    field->type = type;
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	7afa      	ldrb	r2, [r7, #11]
 80009b6:	701a      	strb	r2, [r3, #0]
    field->data_ptr = data_ptr;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	605a      	str	r2, [r3, #4]
    field->name = name;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	60da      	str	r2, [r3, #12]
    field->size = SerialFrame_GetDataSize(type);
 80009c4:	7afb      	ldrb	r3, [r7, #11]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffb0 	bl	800092c <SerialFrame_GetDataSize>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	725a      	strb	r2, [r3, #9]
    field->position = frame->tx_frame_size - 1; // Before terminator
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f893 3402 	ldrb.w	r3, [r3, #1026]	@ 0x402
 80009da:	3b01      	subs	r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	721a      	strb	r2, [r3, #8]

    frame->tx_frame_size += field->size;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f893 2402 	ldrb.w	r2, [r3, #1026]	@ 0x402
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	7a5b      	ldrb	r3, [r3, #9]
 80009ec:	4413      	add	r3, r2
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
    frame->tx_field_count++;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 80009fc:	3301      	adds	r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400

    // Update other field positions
    for (int i = 0; i < frame->tx_field_count; i++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e027      	b.n	8000a5c <SerialFrame_AddTxField+0xd8>
        if (i == frame->tx_field_count - 1) continue;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8000a12:	3b01      	subs	r3, #1
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d01c      	beq.n	8000a54 <SerialFrame_AddTxField+0xd0>
        frame->tx_fields[i].position = i == 0 ? 1 :
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d010      	beq.n	8000a42 <SerialFrame_AddTxField+0xbe>
            (frame->tx_fields[i-1].position + frame->tx_fields[i-1].size);
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	4413      	add	r3, r2
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	68f9      	ldr	r1, [r7, #12]
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	440b      	add	r3, r1
 8000a38:	3309      	adds	r3, #9
 8000a3a:	781b      	ldrb	r3, [r3, #0]
        frame->tx_fields[i].position = i == 0 ? 1 :
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b2d9      	uxtb	r1, r3
 8000a40:	e000      	b.n	8000a44 <SerialFrame_AddTxField+0xc0>
 8000a42:	2101      	movs	r1, #1
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	4413      	add	r3, r2
 8000a4c:	3308      	adds	r3, #8
 8000a4e:	460a      	mov	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	e000      	b.n	8000a56 <SerialFrame_AddTxField+0xd2>
        if (i == frame->tx_field_count - 1) continue;
 8000a54:	bf00      	nop
    for (int i = 0; i < frame->tx_field_count; i++) {
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8000a62:	461a      	mov	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	dbd0      	blt.n	8000a0c <SerialFrame_AddTxField+0x88>
    }

    return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SerialFrame_AddRxField>:

/* Add receive field */
int SerialFrame_AddRxField(SerialFrame *frame, SerialFrameDataType type, void *data_ptr, const char *name) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	460b      	mov	r3, r1
 8000a82:	72fb      	strb	r3, [r7, #11]
    if (frame->rx_field_count >= SERIAL_FRAME_MAX_FIELDS) {
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8000a8a:	2b1f      	cmp	r3, #31
 8000a8c:	d902      	bls.n	8000a94 <SerialFrame_AddRxField+0x20>
        return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e067      	b.n	8000b64 <SerialFrame_AddRxField+0xf0>
    }

    SerialFrameField *field = &frame->rx_fields[frame->rx_field_count];
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8000a9a:	3320      	adds	r3, #32
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
    field->type = type;
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	7afa      	ldrb	r2, [r7, #11]
 8000aa8:	701a      	strb	r2, [r3, #0]
    field->data_ptr = data_ptr;
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	605a      	str	r2, [r3, #4]
    field->name = name;
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	60da      	str	r2, [r3, #12]
    field->size = SerialFrame_GetDataSize(type);
 8000ab6:	7afb      	ldrb	r3, [r7, #11]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff37 	bl	800092c <SerialFrame_GetDataSize>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	725a      	strb	r2, [r3, #9]
    field->position = frame->rx_frame_size - 1; // Before terminator
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f893 3403 	ldrb.w	r3, [r3, #1027]	@ 0x403
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	721a      	strb	r2, [r3, #8]

    frame->rx_frame_size += field->size;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f893 2403 	ldrb.w	r2, [r3, #1027]	@ 0x403
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	7a5b      	ldrb	r3, [r3, #9]
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
    frame->rx_field_count++;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401

    // Update other field positions
    for (int i = 0; i < frame->rx_field_count; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e02a      	b.n	8000b54 <SerialFrame_AddRxField+0xe0>
        if (i == frame->rx_field_count - 1) continue;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8000b04:	3b01      	subs	r3, #1
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d01f      	beq.n	8000b4c <SerialFrame_AddRxField+0xd8>
        frame->rx_fields[i].position = i == 0 ? 1 :
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d012      	beq.n	8000b38 <SerialFrame_AddRxField+0xc4>
            (frame->rx_fields[i-1].position + frame->rx_fields[i-1].size);
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	4413      	add	r3, r2
 8000b1c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f203 2309 	addw	r3, r3, #521	@ 0x209
 8000b30:	781b      	ldrb	r3, [r3, #0]
        frame->rx_fields[i].position = i == 0 ? 1 :
 8000b32:	4413      	add	r3, r2
 8000b34:	b2d9      	uxtb	r1, r3
 8000b36:	e000      	b.n	8000b3a <SerialFrame_AddRxField+0xc6>
 8000b38:	2101      	movs	r1, #1
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	4413      	add	r3, r2
 8000b42:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8000b46:	460a      	mov	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	e000      	b.n	8000b4e <SerialFrame_AddRxField+0xda>
        if (i == frame->rx_field_count - 1) continue;
 8000b4c:	bf00      	nop
    for (int i = 0; i < frame->rx_field_count; i++) {
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	dbcd      	blt.n	8000afe <SerialFrame_AddRxField+0x8a>
    }

    return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <SerialFrame_BuildTxFrame>:
    memset(frame->tx_fields, 0, sizeof(frame->tx_fields));
    memset(frame->rx_fields, 0, sizeof(frame->rx_fields));
}

/* Build transmit frame */
void SerialFrame_BuildTxFrame(SerialFrame *frame) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    frame->tx_buffer[0] = frame->header;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 2608 	ldrb.w	r2, [r3, #1544]	@ 0x608
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404

    for (int i = 0; i < frame->tx_field_count; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e015      	b.n	8000bb2 <SerialFrame_BuildTxFrame+0x46>
        SerialFrameField *field = &frame->tx_fields[i];
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
        memcpy(&frame->tx_buffer[field->position], field->data_ptr, field->size);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	7a1b      	ldrb	r3, [r3, #8]
 8000b94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	1d18      	adds	r0, r3, #4
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	6859      	ldr	r1, [r3, #4]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	7a5b      	ldrb	r3, [r3, #9]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f004 fc46 	bl	8005438 <memcpy>
    for (int i = 0; i < frame->tx_field_count; i++) {
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	dbe2      	blt.n	8000b86 <SerialFrame_BuildTxFrame+0x1a>
    }

    frame->tx_buffer[frame->tx_frame_size - 1] = frame->terminator;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 3402 	ldrb.w	r3, [r3, #1026]	@ 0x402
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f892 1609 	ldrb.w	r1, [r2, #1545]	@ 0x609
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SerialFrame_ParseRxFrame>:

/* Parse receive frame */
void SerialFrame_ParseRxFrame(SerialFrame *frame) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    if (frame->rx_buffer[0] != frame->header) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 2503 	ldrb.w	r2, [r3, #1283]	@ 0x503
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3608 	ldrb.w	r3, [r3, #1544]	@ 0x608
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d121      	bne.n	8000c3c <SerialFrame_ParseRxFrame+0x5c>
        return; // Invalid frame
    }

    for (int i = 0; i < frame->rx_field_count; i++) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e016      	b.n	8000c2c <SerialFrame_ParseRxFrame+0x4c>
        SerialFrameField *field = &frame->rx_fields[i];
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3320      	adds	r3, #32
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	60bb      	str	r3, [r7, #8]
        memcpy(field->data_ptr, &frame->rx_buffer[field->position], field->size);
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	6858      	ldr	r0, [r3, #4]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	7a1b      	ldrb	r3, [r3, #8]
 8000c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	1cd9      	adds	r1, r3, #3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	7a5b      	ldrb	r3, [r3, #9]
 8000c20:	461a      	mov	r2, r3
 8000c22:	f004 fc09 	bl	8005438 <memcpy>
    for (int i = 0; i < frame->rx_field_count; i++) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4293      	cmp	r3, r2
 8000c38:	dbe1      	blt.n	8000bfe <SerialFrame_ParseRxFrame+0x1e>
 8000c3a:	e000      	b.n	8000c3e <SerialFrame_ParseRxFrame+0x5e>
        return; // Invalid frame
 8000c3c:	bf00      	nop
    }
}
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <SerialFrame_Transmit>:

/* Transmit frame */
void SerialFrame_Transmit(SerialFrame *frame) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(frame->huart, frame->tx_buffer, frame->tx_frame_size);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f8d3 0604 	ldr.w	r0, [r3, #1540]	@ 0x604
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f203 4104 	addw	r1, r3, #1028	@ 0x404
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3402 	ldrb.w	r3, [r3, #1026]	@ 0x402
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f002 feca 	bl	80039f8 <HAL_UART_Transmit_DMA>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SerialFrame_StartReceive>:

/* Start receive */
void SerialFrame_StartReceive(SerialFrame *frame) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(frame->huart, frame->rx_buffer, frame->rx_frame_size);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 0604 	ldr.w	r0, [r3, #1540]	@ 0x604
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f203 5103 	addw	r1, r3, #1283	@ 0x503
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3403 	ldrb.w	r3, [r3, #1027]	@ 0x403
 8000c86:	461a      	mov	r2, r3
 8000c88:	f002 ff36 	bl	8003af8 <HAL_UART_Receive_DMA>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cca:	f001 f92f 	bl	8001f2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d32:	f000 fa39 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fd42 	bl	80017ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000073c 	.word	0x2000073c

08000d50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <DMA1_Channel2_IRQHandler+0x10>)
 8000d56:	f000 fd38 	bl	80017ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000079c 	.word	0x2000079c

08000d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <TIM2_IRQHandler+0x10>)
 8000d6a:	f002 f93b 	bl	8002fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000065c 	.word	0x2000065c

08000d78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d80:	f001 f80c 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <LPUART1_IRQHandler+0x10>)
 8000d8e:	f002 feff 	bl	8003b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200006a8 	.word	0x200006a8

08000d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000de8:	22a9      	movs	r2, #169	@ 0xa9
 8000dea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000df4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000df8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e06:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000e08:	f002 f81c 	bl	8002e44 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e12:	f7ff fd49 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000e24:	f002 fa2e 	bl	8003284 <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e2e:	f7ff fd3b 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e32:	2320      	movs	r3, #32
 8000e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <MX_TIM2_Init+0x98>)
 8000e40:	f002 fcae 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e4a:	f7ff fd2d 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000065c 	.word	0x2000065c

08000e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e6c:	d113      	bne.n	8000e96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x44>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	201c      	movs	r0, #28
 8000e8c:	f000 fa85 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e90:	201c      	movs	r0, #28
 8000e92:	f000 fa9c 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000eaa:	4a21      	ldr	r2, [pc, #132]	@ (8000f30 <MX_LPUART1_UART_Init+0x8c>)
 8000eac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000eb0:	4a20      	ldr	r2, [pc, #128]	@ (8000f34 <MX_LPUART1_UART_Init+0x90>)
 8000eb2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000ec8:	220c      	movs	r2, #12
 8000eca:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ee4:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000ee6:	f002 fd37 	bl	8003958 <HAL_UART_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000ef0:	f7ff fcda 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000ef8:	f004 f9a7 	bl	800524a <HAL_UARTEx_SetTxFifoThreshold>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000f02:	f7ff fcd1 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000f0a:	f004 f9dc 	bl	80052c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000f14:	f7ff fcc8 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_LPUART1_UART_Init+0x88>)
 8000f1a:	f004 f95d 	bl	80051d8 <HAL_UARTEx_DisableFifoMode>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000f24:	f7ff fcc0 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200006a8 	.word	0x200006a8
 8000f30:	40008000 	.word	0x40008000
 8000f34:	001e8480 	.word	0x001e8480

08000f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09e      	sub	sp, #120	@ 0x78
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2254      	movs	r2, #84	@ 0x54
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 fa41 	bl	80053e0 <memset>
  if(uartHandle->Instance==LPUART1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a4d      	ldr	r2, [pc, #308]	@ (8001098 <HAL_UART_MspInit+0x160>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	f040 8092 	bne.w	800108e <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fd16 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f82:	f7ff fc91 	bl	80008a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f86:	4b45      	ldr	r3, [pc, #276]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f8a:	4a44      	ldr	r2, [pc, #272]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f92:	4b42      	ldr	r3, [pc, #264]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b3c      	ldr	r3, [pc, #240]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd4:	f000 fd48 	bl	8001a68 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000fd8:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000fda:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <HAL_UART_MspInit+0x16c>)
 8000fdc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000fde:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000fe0:	2222      	movs	r2, #34	@ 0x22
 8000fe2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001002:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8001004:	2220      	movs	r2, #32
 8001006:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800100e:	4824      	ldr	r0, [pc, #144]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8001010:	f000 f9f8 	bl	8001404 <HAL_DMA_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800101a:	f7ff fc45 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8001022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001026:	4a1e      	ldr	r2, [pc, #120]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800102c:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800102e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ac <HAL_UART_MspInit+0x174>)
 8001030:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001034:	2223      	movs	r2, #35	@ 0x23
 8001036:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800103a:	2210      	movs	r2, #16
 800103c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001046:	2280      	movs	r2, #128	@ 0x80
 8001048:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001062:	4811      	ldr	r0, [pc, #68]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001064:	f000 f9ce 	bl	8001404 <HAL_DMA_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800106e:	f7ff fc1b 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001076:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	205b      	movs	r0, #91	@ 0x5b
 8001084:	f000 f989 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001088:	205b      	movs	r0, #91	@ 0x5b
 800108a:	f000 f9a0 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800108e:	bf00      	nop
 8001090:	3778      	adds	r7, #120	@ 0x78
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40008000 	.word	0x40008000
 800109c:	40021000 	.word	0x40021000
 80010a0:	2000073c 	.word	0x2000073c
 80010a4:	40020008 	.word	0x40020008
 80010a8:	2000079c 	.word	0x2000079c
 80010ac:	4002001c 	.word	0x4002001c

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b4:	f7ff fe72 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	@ (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	@ (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f004 f987 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff facf 	bl	8000684 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   r0, =_estack
 80010e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010f4:	08005528 	.word	0x08005528
  ldr r2, =_sbss
 80010f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010fc:	20000800 	.word	0x20000800

08001100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_2_IRQHandler>

08001102 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f939 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f80e 	bl	8001134 <HAL_InitTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001124:	f7ff fdb6 	bl	8000c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001128:	79fb      	ldrb	r3, [r7, #7]

}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001140:	4b16      	ldr	r3, [pc, #88]	@ (800119c <HAL_InitTick+0x68>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d022      	beq.n	800118e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001148:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_InitTick+0x6c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <HAL_InitTick+0x68>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001154:	fbb1 f3f3 	udiv	r3, r1, r3
 8001158:	fbb2 f3f3 	udiv	r3, r2, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f944 	bl	80013ea <HAL_SYSTICK_Config>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10f      	bne.n	8001188 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	d809      	bhi.n	8001182 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116e:	2200      	movs	r2, #0
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	f000 f910 	bl	800139a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <HAL_InitTick+0x70>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e007      	b.n	8001192 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e004      	b.n	8001192 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_IncTick+0x1c>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <HAL_IncTick+0x20>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a03      	ldr	r2, [pc, #12]	@ (80011c4 <HAL_IncTick+0x1c>)
 80011b8:	6013      	str	r3, [r2, #0]
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	200007fc 	.word	0x200007fc
 80011c8:	20000008 	.word	0x20000008

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200007fc 	.word	0x200007fc

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	@ (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff40 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff90 	bl	80012d8 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5f 	bl	8001284 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff33 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa4 	bl	8001340 <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e08d      	b.n	8001532 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	4b47      	ldr	r3, [pc, #284]	@ (800153c <HAL_DMA_Init+0x138>)
 800141e:	429a      	cmp	r2, r3
 8001420:	d80f      	bhi.n	8001442 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4b45      	ldr	r3, [pc, #276]	@ (8001540 <HAL_DMA_Init+0x13c>)
 800142a:	4413      	add	r3, r2
 800142c:	4a45      	ldr	r2, [pc, #276]	@ (8001544 <HAL_DMA_Init+0x140>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a42      	ldr	r2, [pc, #264]	@ (8001548 <HAL_DMA_Init+0x144>)
 800143e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001440:	e00e      	b.n	8001460 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	4b40      	ldr	r3, [pc, #256]	@ (800154c <HAL_DMA_Init+0x148>)
 800144a:	4413      	add	r3, r2
 800144c:	4a3d      	ldr	r2, [pc, #244]	@ (8001544 <HAL_DMA_Init+0x140>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	009a      	lsls	r2, r3, #2
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a3c      	ldr	r2, [pc, #240]	@ (8001550 <HAL_DMA_Init+0x14c>)
 800145e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800147a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fa76 	bl	80019a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014c0:	d102      	bne.n	80014c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d010      	beq.n	8001508 <HAL_DMA_Init+0x104>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d80c      	bhi.n	8001508 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fa96 	bl	8001a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	e008      	b.n	800151a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40020407 	.word	0x40020407
 8001540:	bffdfff8 	.word	0xbffdfff8
 8001544:	cccccccd 	.word	0xcccccccd
 8001548:	40020000 	.word	0x40020000
 800154c:	bffdfbf8 	.word	0xbffdfbf8
 8001550:	40020400 	.word	0x40020400

08001554 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_DMA_Start_IT+0x20>
 8001570:	2302      	movs	r3, #2
 8001572:	e066      	b.n	8001642 <HAL_DMA_Start_IT+0xee>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d155      	bne.n	8001634 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f9bb 	bl	8001928 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 020e 	orr.w	r2, r2, #14
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e00f      	b.n	80015ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0204 	bic.w	r2, r2, #4
 80015da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 020a 	orr.w	r2, r2, #10
 80015ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001608:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001620:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e005      	b.n	8001640 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800163c:	2302      	movs	r3, #2
 800163e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001640:	7dfb      	ldrb	r3, [r7, #23]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d005      	beq.n	800166e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2204      	movs	r2, #4
 8001666:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e037      	b.n	80016de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 020e 	bic.w	r2, r2, #14
 800167c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001688:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800168c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0201 	bic.w	r2, r2, #1
 800169c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f003 021f 	and.w	r2, r3, #31
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00c      	beq.n	80016de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d00d      	beq.n	8001730 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2204      	movs	r2, #4
 8001718:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e047      	b.n	80017c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020e 	bic.w	r2, r2, #14
 800173e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800175e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800177c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001794:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800179e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4798      	blx	r3
    }
  }
  return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	2204      	movs	r2, #4
 80017ec:	409a      	lsls	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d026      	beq.n	8001844 <HAL_DMA_IRQHandler+0x7a>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d021      	beq.n	8001844 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0204 	bic.w	r2, r2, #4
 800181c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f003 021f 	and.w	r2, r3, #31
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	2104      	movs	r1, #4
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	2b00      	cmp	r3, #0
 8001838:	d071      	beq.n	800191e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001842:	e06c      	b.n	800191e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	2202      	movs	r2, #2
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d02e      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d029      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10b      	bne.n	8001888 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 020a 	bic.w	r2, r2, #10
 800187e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	2102      	movs	r1, #2
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d038      	beq.n	800191e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018b4:	e033      	b.n	800191e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	2208      	movs	r2, #8
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d02a      	beq.n	8001920 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d025      	beq.n	8001920 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 020e 	bic.w	r2, r2, #14
 80018e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800191e:	bf00      	nop
 8001920:	bf00      	nop
}
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800193e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001950:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	f003 021f 	and.w	r2, r3, #31
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b10      	cmp	r3, #16
 8001974:	d108      	bne.n	8001988 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001986:	e007      	b.n	8001998 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	60da      	str	r2, [r3, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d802      	bhi.n	80019be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e001      	b.n	80019c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3b08      	subs	r3, #8
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	009a      	lsls	r2, r3, #2
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2201      	movs	r2, #1
 80019f8:	409a      	lsls	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40020407 	.word	0x40020407
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020820 	.word	0x40020820
 8001a18:	cccccccd 	.word	0xcccccccd
 8001a1c:	40020880 	.word	0x40020880

08001a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a42:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	1000823f 	.word	0x1000823f
 8001a64:	40020940 	.word	0x40020940

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a76:	e15a      	b.n	8001d2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 814c 	beq.w	8001d28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d005      	beq.n	8001aa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d130      	bne.n	8001b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f003 0201 	and.w	r2, r3, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d017      	beq.n	8001b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d123      	bne.n	8001b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	6939      	ldr	r1, [r7, #16]
 8001b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0203 	and.w	r2, r3, #3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80a6 	beq.w	8001d28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be8:	4b58      	ldr	r3, [pc, #352]	@ (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf4:	4a56      	ldr	r2, [pc, #344]	@ (8001d50 <HAL_GPIO_Init+0x2e8>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c1e:	d01f      	beq.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a4c      	ldr	r2, [pc, #304]	@ (8001d54 <HAL_GPIO_Init+0x2ec>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d019      	beq.n	8001c5c <HAL_GPIO_Init+0x1f4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <HAL_GPIO_Init+0x1f0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a4a      	ldr	r2, [pc, #296]	@ (8001d5c <HAL_GPIO_Init+0x2f4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1ec>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a49      	ldr	r2, [pc, #292]	@ (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1e8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a48      	ldr	r2, [pc, #288]	@ (8001d64 <HAL_GPIO_Init+0x2fc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1e4>
 8001c48:	2305      	movs	r3, #5
 8001c4a:	e00a      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c4c:	2306      	movs	r3, #6
 8001c4e:	e008      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c50:	2304      	movs	r3, #4
 8001c52:	e006      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c54:	2303      	movs	r3, #3
 8001c56:	e004      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c60:	2300      	movs	r3, #0
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	f002 0203 	and.w	r2, r2, #3
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c72:	4937      	ldr	r1, [pc, #220]	@ (8001d50 <HAL_GPIO_Init+0x2e8>)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c80:	4b39      	ldr	r3, [pc, #228]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ca4:	4a30      	ldr	r2, [pc, #192]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001caa:	4b2f      	ldr	r3, [pc, #188]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cce:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d22:	4a11      	ldr	r2, [pc, #68]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f ae9d 	bne.w	8001a78 <HAL_GPIO_Init+0x10>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	48000c00 	.word	0x48000c00
 8001d60:	48001000 	.word	0x48001000
 8001d64:	48001400 	.word	0x48001400
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001db2:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f806 	bl	8001dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d141      	bne.n	8001e76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001df2:	4b4b      	ldr	r3, [pc, #300]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dfe:	d131      	bne.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e00:	4b47      	ldr	r3, [pc, #284]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e06:	4a46      	ldr	r2, [pc, #280]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e10:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e18:	4a41      	ldr	r2, [pc, #260]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e20:	4b40      	ldr	r3, [pc, #256]	@ (8001f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2232      	movs	r2, #50	@ 0x32
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	3301      	adds	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e36:	e002      	b.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e4a:	d102      	bne.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f2      	bne.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e52:	4b33      	ldr	r3, [pc, #204]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5e:	d158      	bne.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e057      	b.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e64:	4b2e      	ldr	r3, [pc, #184]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e74:	e04d      	b.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e7c:	d141      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e7e:	4b28      	ldr	r3, [pc, #160]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8a:	d131      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e8c:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e92:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9c:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2232      	movs	r2, #50	@ 0x32
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	0c9b      	lsrs	r3, r3, #18
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec2:	e002      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed6:	d102      	bne.n	8001ede <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f2      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eea:	d112      	bne.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e011      	b.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f00:	e007      	b.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f0a:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40007000 	.word	0x40007000
 8001f24:	20000000 	.word	0x20000000
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f3a:	6093      	str	r3, [r2, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40007000 	.word	0x40007000

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e2fe      	b.n	800255c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d075      	beq.n	8002056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f6a:	4b97      	ldr	r3, [pc, #604]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f74:	4b94      	ldr	r3, [pc, #592]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3e>
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_OscConfig+0x44>
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	4b8d      	ldr	r3, [pc, #564]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05b      	beq.n	8002054 <HAL_RCC_OscConfig+0x108>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d157      	bne.n	8002054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e2d9      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x74>
 8001fb2:	4b85      	ldr	r3, [pc, #532]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a84      	ldr	r2, [pc, #528]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x98>
 8001fca:	4b7f      	ldr	r3, [pc, #508]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7e      	ldr	r2, [pc, #504]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7b      	ldr	r2, [pc, #492]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fe4:	4b78      	ldr	r3, [pc, #480]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a77      	ldr	r2, [pc, #476]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b75      	ldr	r3, [pc, #468]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a74      	ldr	r2, [pc, #464]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f8e2 	bl	80011cc <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff f8de 	bl	80011cc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	@ 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e29e      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800201e:	4b6a      	ldr	r3, [pc, #424]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xc0>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f8ce 	bl	80011cc <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff f8ca 	bl	80011cc <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e28a      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002046:	4b60      	ldr	r3, [pc, #384]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0xe8>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d075      	beq.n	800214e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002062:	4b59      	ldr	r3, [pc, #356]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800206c:	4b56      	ldr	r3, [pc, #344]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d102      	bne.n	8002082 <HAL_RCC_OscConfig+0x136>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d002      	beq.n	8002088 <HAL_RCC_OscConfig+0x13c>
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d11f      	bne.n	80020c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002088:	4b4f      	ldr	r3, [pc, #316]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_OscConfig+0x154>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e25d      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a0:	4b49      	ldr	r3, [pc, #292]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	4946      	ldr	r1, [pc, #280]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020b4:	4b45      	ldr	r3, [pc, #276]	@ (80021cc <HAL_RCC_OscConfig+0x280>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f83b 	bl	8001134 <HAL_InitTick>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d043      	beq.n	800214c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e249      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d023      	beq.n	8002118 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b3d      	ldr	r3, [pc, #244]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a3c      	ldr	r2, [pc, #240]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff f876 	bl	80011cc <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff f872 	bl	80011cc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e232      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f6:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	492d      	ldr	r1, [pc, #180]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
 8002116:	e01a      	b.n	800214e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002118:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a2a      	ldr	r2, [pc, #168]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800211e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f852 	bl	80011cc <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff f84e 	bl	80011cc <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e20e      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213e:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1e0>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d041      	beq.n	80021de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01c      	beq.n	800219c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002168:	4a17      	ldr	r2, [pc, #92]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7ff f82b 	bl	80011cc <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217a:	f7ff f827 	bl	80011cc <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1e7      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0ef      	beq.n	800217a <HAL_RCC_OscConfig+0x22e>
 800219a:	e020      	b.n	80021de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a2:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f80e 	bl	80011cc <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b2:	e00d      	b.n	80021d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7ff f80a 	bl	80011cc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d906      	bls.n	80021d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1ca      	b.n	800255c <HAL_RCC_OscConfig+0x610>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ea      	bne.n	80021b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80a6 	beq.w	8002338 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021f0:	4b84      	ldr	r3, [pc, #528]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x2b4>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x2b6>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b7f      	ldr	r3, [pc, #508]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	4a7e      	ldr	r2, [pc, #504]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	@ 0x58
 8002212:	4b7c      	ldr	r3, [pc, #496]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002222:	4b79      	ldr	r3, [pc, #484]	@ (8002408 <HAL_RCC_OscConfig+0x4bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222e:	4b76      	ldr	r3, [pc, #472]	@ (8002408 <HAL_RCC_OscConfig+0x4bc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a75      	ldr	r2, [pc, #468]	@ (8002408 <HAL_RCC_OscConfig+0x4bc>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7fe ffc7 	bl	80011cc <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe ffc3 	bl	80011cc <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e183      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002254:	4b6c      	ldr	r3, [pc, #432]	@ (8002408 <HAL_RCC_OscConfig+0x4bc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d108      	bne.n	800227a <HAL_RCC_OscConfig+0x32e>
 8002268:	4b66      	ldr	r3, [pc, #408]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	4a65      	ldr	r2, [pc, #404]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002278:	e024      	b.n	80022c4 <HAL_RCC_OscConfig+0x378>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d110      	bne.n	80022a4 <HAL_RCC_OscConfig+0x358>
 8002282:	4b60      	ldr	r3, [pc, #384]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002288:	4a5e      	ldr	r2, [pc, #376]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002292:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002298:	4a5a      	ldr	r2, [pc, #360]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022a2:	e00f      	b.n	80022c4 <HAL_RCC_OscConfig+0x378>
 80022a4:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022aa:	4a56      	ldr	r2, [pc, #344]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022b4:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	4a52      	ldr	r2, [pc, #328]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d016      	beq.n	80022fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7fe ff7e 	bl	80011cc <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe ff7a 	bl	80011cc <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e138      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	4b46      	ldr	r3, [pc, #280]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ed      	beq.n	80022d4 <HAL_RCC_OscConfig+0x388>
 80022f8:	e015      	b.n	8002326 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7fe ff67 	bl	80011cc <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fe ff63 	bl	80011cc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e121      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002318:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ed      	bne.n	8002302 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002326:	7ffb      	ldrb	r3, [r7, #31]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b35      	ldr	r3, [pc, #212]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	4a34      	ldr	r2, [pc, #208]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03c      	beq.n	80023be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01c      	beq.n	8002386 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800234c:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800234e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002352:	4a2c      	ldr	r2, [pc, #176]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe ff36 	bl	80011cc <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002364:	f7fe ff32 	bl	80011cc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0f2      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002376:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ef      	beq.n	8002364 <HAL_RCC_OscConfig+0x418>
 8002384:	e01b      	b.n	80023be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002386:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800238c:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fe ff19 	bl	80011cc <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800239e:	f7fe ff15 	bl	80011cc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0d5      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80023b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ef      	bne.n	800239e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80c9 	beq.w	800255a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	f000 8083 	beq.w	80024dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d15e      	bne.n	800249c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe feef 	bl	80011cc <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	e00c      	b.n	800240c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe feeb 	bl	80011cc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d905      	bls.n	800240c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0ab      	b.n	800255c <HAL_RCC_OscConfig+0x610>
 8002404:	40021000 	.word	0x40021000
 8002408:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240c:	4b55      	ldr	r3, [pc, #340]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ec      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002418:	4b52      	ldr	r3, [pc, #328]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4b52      	ldr	r3, [pc, #328]	@ (8002568 <HAL_RCC_OscConfig+0x61c>)
 800241e:	4013      	ands	r3, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6a11      	ldr	r1, [r2, #32]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002428:	3a01      	subs	r2, #1
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002432:	0212      	lsls	r2, r2, #8
 8002434:	4311      	orrs	r1, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800243a:	0852      	lsrs	r2, r2, #1
 800243c:	3a01      	subs	r2, #1
 800243e:	0552      	lsls	r2, r2, #21
 8002440:	4311      	orrs	r1, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002446:	0852      	lsrs	r2, r2, #1
 8002448:	3a01      	subs	r2, #1
 800244a:	0652      	lsls	r2, r2, #25
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002452:	06d2      	lsls	r2, r2, #27
 8002454:	430a      	orrs	r2, r1
 8002456:	4943      	ldr	r1, [pc, #268]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 8002458:	4313      	orrs	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a40      	ldr	r2, [pc, #256]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002468:	4b3e      	ldr	r3, [pc, #248]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a3d      	ldr	r2, [pc, #244]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002472:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe feaa 	bl	80011cc <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fea6 	bl	80011cc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e066      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x530>
 800249a:	e05e      	b.n	800255a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a30      	ldr	r2, [pc, #192]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fe90 	bl	80011cc <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fe8c 	bl	80011cc <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04c      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c2:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4924      	ldr	r1, [pc, #144]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024d4:	4b25      	ldr	r3, [pc, #148]	@ (800256c <HAL_RCC_OscConfig+0x620>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	60cb      	str	r3, [r1, #12]
 80024da:	e03e      	b.n	800255a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e039      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d12c      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d123      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d11b      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d113      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d109      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	3b01      	subs	r3, #1
 8002550:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	019f800c 	.word	0x019f800c
 800256c:	feeefffc 	.word	0xfeeefffc

08002570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e11e      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b91      	ldr	r3, [pc, #580]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b8e      	ldr	r3, [pc, #568]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 020f 	bic.w	r2, r3, #15
 800259e:	498c      	ldr	r1, [pc, #560]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b8a      	ldr	r3, [pc, #552]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e106      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d073      	beq.n	80026ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d129      	bne.n	8002620 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025cc:	4b81      	ldr	r3, [pc, #516]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0f4      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025dc:	f000 f99e 	bl	800291c <RCC_GetSysClockFreqFromPLLSource>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4a7c      	ldr	r2, [pc, #496]	@ (80027d8 <HAL_RCC_ClockConfig+0x268>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d93f      	bls.n	800266a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025ea:	4b7a      	ldr	r3, [pc, #488]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d033      	beq.n	800266a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d12f      	bne.n	800266a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800260a:	4b72      	ldr	r3, [pc, #456]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002612:	4a70      	ldr	r2, [pc, #448]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002618:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800261a:	2380      	movs	r3, #128	@ 0x80
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e024      	b.n	800266a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d107      	bne.n	8002638 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002628:	4b6a      	ldr	r3, [pc, #424]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0c6      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0be      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002648:	f000 f8ce 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 800264c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4a61      	ldr	r2, [pc, #388]	@ (80027d8 <HAL_RCC_ClockConfig+0x268>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d909      	bls.n	800266a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002656:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800265e:	4a5d      	ldr	r2, [pc, #372]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002664:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b5a      	ldr	r3, [pc, #360]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4957      	ldr	r1, [pc, #348]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267c:	f7fe fda6 	bl	80011cc <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fda2 	bl	80011cc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e095      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b4e      	ldr	r3, [pc, #312]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d023      	beq.n	8002700 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a42      	ldr	r2, [pc, #264]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026dc:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026e4:	4a3b      	ldr	r2, [pc, #236]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b39      	ldr	r3, [pc, #228]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4936      	ldr	r1, [pc, #216]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
 80026fe:	e008      	b.n	8002712 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b80      	cmp	r3, #128	@ 0x80
 8002704:	d105      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002706:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4a32      	ldr	r2, [pc, #200]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800270c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002710:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002712:	4b2f      	ldr	r3, [pc, #188]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d21d      	bcs.n	800275c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002720:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 020f 	bic.w	r2, r3, #15
 8002728:	4929      	ldr	r1, [pc, #164]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002730:	f7fe fd4c 	bl	80011cc <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe fd48 	bl	80011cc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e03b      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d1ed      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4917      	ldr	r1, [pc, #92]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490f      	ldr	r1, [pc, #60]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279a:	f000 f825 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490c      	ldr	r1, [pc, #48]	@ (80027dc <HAL_RCC_ClockConfig+0x26c>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <HAL_RCC_ClockConfig+0x270>)
 80027b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_RCC_ClockConfig+0x274>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fcb8 	bl	8001134 <HAL_InitTick>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40021000 	.word	0x40021000
 80027d8:	04c4b400 	.word	0x04c4b400
 80027dc:	080054d8 	.word	0x080054d8
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027fa:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e047      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002800:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d102      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800280c:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e03e      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002812:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d136      	bne.n	800288c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3301      	adds	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d10c      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800283c:	4a1a      	ldr	r2, [pc, #104]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	4a16      	ldr	r2, [pc, #88]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002846:	68d2      	ldr	r2, [r2, #12]
 8002848:	0a12      	lsrs	r2, r2, #8
 800284a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
      break;
 8002854:	e00c      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002856:	4a13      	ldr	r2, [pc, #76]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	0a12      	lsrs	r2, r2, #8
 8002864:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
      break;
 800286e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0e5b      	lsrs	r3, r3, #25
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	3301      	adds	r3, #1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e001      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002890:	693b      	ldr	r3, [r7, #16]
}
 8002892:	4618      	mov	r0, r3
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	016e3600 	.word	0x016e3600

080028ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028c8:	f7ff fff0 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4904      	ldr	r1, [pc, #16]	@ (80028ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	080054e8 	.word	0x080054e8

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028f4:	f7ff ffda 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0adb      	lsrs	r3, r3, #11
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4904      	ldr	r1, [pc, #16]	@ (8002918 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	080054e8 	.word	0x080054e8

0800291c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002922:	4b1e      	ldr	r3, [pc, #120]	@ (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3301      	adds	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d10c      	bne.n	800295a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002940:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	4a14      	ldr	r2, [pc, #80]	@ (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800294a:	68d2      	ldr	r2, [r2, #12]
 800294c:	0a12      	lsrs	r2, r2, #8
 800294e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
    break;
 8002958:	e00c      	b.n	8002974 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4a0e      	ldr	r2, [pc, #56]	@ (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	0a12      	lsrs	r2, r2, #8
 8002968:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    break;
 8002972:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0e5b      	lsrs	r3, r3, #25
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800298e:	687b      	ldr	r3, [r7, #4]
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40021000 	.word	0x40021000
 80029a0:	016e3600 	.word	0x016e3600
 80029a4:	00f42400 	.word	0x00f42400

080029a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8098 	beq.w	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b43      	ldr	r3, [pc, #268]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b40      	ldr	r3, [pc, #256]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	4a3f      	ldr	r2, [pc, #252]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f2:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a39      	ldr	r2, [pc, #228]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029fe:	f7fe fbe5 	bl	80011cc <HAL_GetTick>
 8002a02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a04:	e009      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7fe fbe1 	bl	80011cc <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d902      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	74fb      	strb	r3, [r7, #19]
        break;
 8002a18:	e005      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a1a:	4b30      	ldr	r3, [pc, #192]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ef      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d159      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01e      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d019      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a48:	4b23      	ldr	r3, [pc, #140]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a54:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a74:	4a18      	ldr	r2, [pc, #96]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe fba1 	bl	80011cc <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8c:	e00b      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe fb9d 	bl	80011cc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d902      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	74fb      	strb	r3, [r7, #19]
            break;
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ec      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac8:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	74bb      	strb	r3, [r7, #18]
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae4:	7c7b      	ldrb	r3, [r7, #17]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aea:	4ba7      	ldr	r3, [pc, #668]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	4aa6      	ldr	r2, [pc, #664]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b02:	4ba1      	ldr	r3, [pc, #644]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b08:	f023 0203 	bic.w	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	499d      	ldr	r1, [pc, #628]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b24:	4b98      	ldr	r3, [pc, #608]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2a:	f023 020c 	bic.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4995      	ldr	r1, [pc, #596]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b46:	4b90      	ldr	r3, [pc, #576]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	498c      	ldr	r1, [pc, #560]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b68:	4b87      	ldr	r3, [pc, #540]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	4984      	ldr	r1, [pc, #528]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	497b      	ldr	r1, [pc, #492]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bac:	4b76      	ldr	r3, [pc, #472]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	4973      	ldr	r1, [pc, #460]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bce:	4b6e      	ldr	r3, [pc, #440]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	496a      	ldr	r1, [pc, #424]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bf0:	4b65      	ldr	r3, [pc, #404]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4962      	ldr	r1, [pc, #392]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c12:	4b5d      	ldr	r3, [pc, #372]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	4959      	ldr	r1, [pc, #356]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c34:	4b54      	ldr	r3, [pc, #336]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	4951      	ldr	r1, [pc, #324]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c56:	4b4c      	ldr	r3, [pc, #304]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	4948      	ldr	r1, [pc, #288]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c78:	4b43      	ldr	r3, [pc, #268]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4940      	ldr	r1, [pc, #256]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c96:	d105      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c98:	4b3b      	ldr	r3, [pc, #236]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ca2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d015      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cb0:	4b35      	ldr	r3, [pc, #212]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbe:	4932      	ldr	r1, [pc, #200]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cce:	d105      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cda:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ce8:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf6:	4924      	ldr	r1, [pc, #144]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d06:	d105      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d08:	4b1f      	ldr	r3, [pc, #124]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d015      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d20:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2e:	4916      	ldr	r1, [pc, #88]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a10      	ldr	r2, [pc, #64]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d019      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	4908      	ldr	r1, [pc, #32]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d76:	d109      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d78:	4b03      	ldr	r3, [pc, #12]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a02      	ldr	r2, [pc, #8]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d82:	60d3      	str	r3, [r2, #12]
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d015      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d98:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	4926      	ldr	r1, [pc, #152]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002db8:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d015      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dde:	4918      	ldr	r1, [pc, #96]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dee:	d105      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002df0:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d015      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e08:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	490a      	ldr	r1, [pc, #40]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e26:	d105      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e28:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e34:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000

08002e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e049      	b.n	8002eea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fff6 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f000 fb3c 	bl	8003500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d001      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e054      	b.n	8002fb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a26      	ldr	r2, [pc, #152]	@ (8002fc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d022      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f36:	d01d      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	@ (8002fc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a21      	ldr	r2, [pc, #132]	@ (8002fcc <HAL_TIM_Base_Start_IT+0xd8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd4 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fdc <HAL_TIM_Base_Start_IT+0xe8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d115      	bne.n	8002fa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xec>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d015      	beq.n	8002fb2 <HAL_TIM_Base_Start_IT+0xbe>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8c:	d011      	beq.n	8002fb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	e008      	b.n	8002fb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e000      	b.n	8002fb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40013400 	.word	0x40013400
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	40015000 	.word	0x40015000
 8002fe0:	00010007 	.word	0x00010007

08002fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0202 	mvn.w	r2, #2
 8003018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa48 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa3a 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fa4b 	bl	80034d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d020      	beq.n	8003094 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01b      	beq.n	8003094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0204 	mvn.w	r2, #4
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa22 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa14 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fa25 	bl	80034d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d020      	beq.n	80030e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01b      	beq.n	80030e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0208 	mvn.w	r2, #8
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2204      	movs	r2, #4
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f9fc 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f9ee 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f9ff 	bl	80034d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d020      	beq.n	800312c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01b      	beq.n	800312c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0210 	mvn.w	r2, #16
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2208      	movs	r2, #8
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9d6 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9c8 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f9d9 	bl	80034d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0201 	mvn.w	r2, #1
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fb80 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fbb1 	bl	80038e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800319a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fba9 	bl	80038f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00c      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f993 	bl	80034ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00c      	beq.n	80031ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0220 	mvn.w	r2, #32
 80031e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fb71 	bl	80038cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00c      	beq.n	800320e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb7d 	bl	8003908 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800322a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb75 	bl	800391c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800324e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb6d 	bl	8003930 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00c      	beq.n	800327a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fb65 	bl	8003944 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c>
 800329c:	2302      	movs	r3, #2
 800329e:	e0f6      	b.n	800348e <HAL_TIM_ConfigClockSource+0x20a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80032be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a6f      	ldr	r2, [pc, #444]	@ (8003498 <HAL_TIM_ConfigClockSource+0x214>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	f000 80c1 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 80032e0:	4a6d      	ldr	r2, [pc, #436]	@ (8003498 <HAL_TIM_ConfigClockSource+0x214>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f200 80c6 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 80032e8:	4a6c      	ldr	r2, [pc, #432]	@ (800349c <HAL_TIM_ConfigClockSource+0x218>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	f000 80b9 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 80032f0:	4a6a      	ldr	r2, [pc, #424]	@ (800349c <HAL_TIM_ConfigClockSource+0x218>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	f200 80be 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 80032f8:	4a69      	ldr	r2, [pc, #420]	@ (80034a0 <HAL_TIM_ConfigClockSource+0x21c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	f000 80b1 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 8003300:	4a67      	ldr	r2, [pc, #412]	@ (80034a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	f200 80b6 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003308:	4a66      	ldr	r2, [pc, #408]	@ (80034a4 <HAL_TIM_ConfigClockSource+0x220>)
 800330a:	4293      	cmp	r3, r2
 800330c:	f000 80a9 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 8003310:	4a64      	ldr	r2, [pc, #400]	@ (80034a4 <HAL_TIM_ConfigClockSource+0x220>)
 8003312:	4293      	cmp	r3, r2
 8003314:	f200 80ae 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003318:	4a63      	ldr	r2, [pc, #396]	@ (80034a8 <HAL_TIM_ConfigClockSource+0x224>)
 800331a:	4293      	cmp	r3, r2
 800331c:	f000 80a1 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 8003320:	4a61      	ldr	r2, [pc, #388]	@ (80034a8 <HAL_TIM_ConfigClockSource+0x224>)
 8003322:	4293      	cmp	r3, r2
 8003324:	f200 80a6 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003328:	4a60      	ldr	r2, [pc, #384]	@ (80034ac <HAL_TIM_ConfigClockSource+0x228>)
 800332a:	4293      	cmp	r3, r2
 800332c:	f000 8099 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 8003330:	4a5e      	ldr	r2, [pc, #376]	@ (80034ac <HAL_TIM_ConfigClockSource+0x228>)
 8003332:	4293      	cmp	r3, r2
 8003334:	f200 809e 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003338:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800333c:	f000 8091 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 8003340:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003344:	f200 8096 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003348:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800334c:	f000 8089 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 8003350:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003354:	f200 808e 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800335c:	d03e      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0x158>
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003362:	f200 8087 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800336a:	f000 8086 	beq.w	800347a <HAL_TIM_ConfigClockSource+0x1f6>
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003372:	d87f      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003374:	2b70      	cmp	r3, #112	@ 0x70
 8003376:	d01a      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x12a>
 8003378:	2b70      	cmp	r3, #112	@ 0x70
 800337a:	d87b      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 800337c:	2b60      	cmp	r3, #96	@ 0x60
 800337e:	d050      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x19e>
 8003380:	2b60      	cmp	r3, #96	@ 0x60
 8003382:	d877      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003384:	2b50      	cmp	r3, #80	@ 0x50
 8003386:	d03c      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x17e>
 8003388:	2b50      	cmp	r3, #80	@ 0x50
 800338a:	d873      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 800338c:	2b40      	cmp	r3, #64	@ 0x40
 800338e:	d058      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x1be>
 8003390:	2b40      	cmp	r3, #64	@ 0x40
 8003392:	d86f      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 8003394:	2b30      	cmp	r3, #48	@ 0x30
 8003396:	d064      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 8003398:	2b30      	cmp	r3, #48	@ 0x30
 800339a:	d86b      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d060      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d867      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05c      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d05a      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x1de>
 80033ac:	e062      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033be:	f000 f9cf 	bl	8003760 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	609a      	str	r2, [r3, #8]
      break;
 80033da:	e04f      	b.n	800347c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	f000 f9b8 	bl	8003760 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033fe:	609a      	str	r2, [r3, #8]
      break;
 8003400:	e03c      	b.n	800347c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	461a      	mov	r2, r3
 8003410:	f000 f92a 	bl	8003668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2150      	movs	r1, #80	@ 0x50
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f983 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003420:	e02c      	b.n	800347c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800342e:	461a      	mov	r2, r3
 8003430:	f000 f949 	bl	80036c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2160      	movs	r1, #96	@ 0x60
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f973 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003440:	e01c      	b.n	800347c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344e:	461a      	mov	r2, r3
 8003450:	f000 f90a 	bl	8003668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2140      	movs	r1, #64	@ 0x40
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f963 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003460:	e00c      	b.n	800347c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f000 f95a 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003472:	e003      	b.n	800347c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      break;
 8003478:	e000      	b.n	800347c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800347a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	00100070 	.word	0x00100070
 800349c:	00100060 	.word	0x00100060
 80034a0:	00100050 	.word	0x00100050
 80034a4:	00100040 	.word	0x00100040
 80034a8:	00100030 	.word	0x00100030
 80034ac:	00100020 	.word	0x00100020

080034b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a4c      	ldr	r2, [pc, #304]	@ (8003644 <TIM_Base_SetConfig+0x144>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d017      	beq.n	8003548 <TIM_Base_SetConfig+0x48>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351e:	d013      	beq.n	8003548 <TIM_Base_SetConfig+0x48>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a49      	ldr	r2, [pc, #292]	@ (8003648 <TIM_Base_SetConfig+0x148>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00f      	beq.n	8003548 <TIM_Base_SetConfig+0x48>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a48      	ldr	r2, [pc, #288]	@ (800364c <TIM_Base_SetConfig+0x14c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0x48>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a47      	ldr	r2, [pc, #284]	@ (8003650 <TIM_Base_SetConfig+0x150>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0x48>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a46      	ldr	r2, [pc, #280]	@ (8003654 <TIM_Base_SetConfig+0x154>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0x48>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a45      	ldr	r2, [pc, #276]	@ (8003658 <TIM_Base_SetConfig+0x158>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a39      	ldr	r2, [pc, #228]	@ (8003644 <TIM_Base_SetConfig+0x144>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d023      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003568:	d01f      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a36      	ldr	r2, [pc, #216]	@ (8003648 <TIM_Base_SetConfig+0x148>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01b      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a35      	ldr	r2, [pc, #212]	@ (800364c <TIM_Base_SetConfig+0x14c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d017      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a34      	ldr	r2, [pc, #208]	@ (8003650 <TIM_Base_SetConfig+0x150>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a33      	ldr	r2, [pc, #204]	@ (8003654 <TIM_Base_SetConfig+0x154>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00f      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a33      	ldr	r2, [pc, #204]	@ (800365c <TIM_Base_SetConfig+0x15c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00b      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a32      	ldr	r2, [pc, #200]	@ (8003660 <TIM_Base_SetConfig+0x160>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a31      	ldr	r2, [pc, #196]	@ (8003664 <TIM_Base_SetConfig+0x164>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_Base_SetConfig+0xaa>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <TIM_Base_SetConfig+0x158>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d108      	bne.n	80035bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a18      	ldr	r2, [pc, #96]	@ (8003644 <TIM_Base_SetConfig+0x144>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <TIM_Base_SetConfig+0x110>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003654 <TIM_Base_SetConfig+0x154>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00f      	beq.n	8003610 <TIM_Base_SetConfig+0x110>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1a      	ldr	r2, [pc, #104]	@ (800365c <TIM_Base_SetConfig+0x15c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00b      	beq.n	8003610 <TIM_Base_SetConfig+0x110>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a19      	ldr	r2, [pc, #100]	@ (8003660 <TIM_Base_SetConfig+0x160>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <TIM_Base_SetConfig+0x110>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a18      	ldr	r2, [pc, #96]	@ (8003664 <TIM_Base_SetConfig+0x164>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_Base_SetConfig+0x110>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a13      	ldr	r2, [pc, #76]	@ (8003658 <TIM_Base_SetConfig+0x158>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d103      	bne.n	8003618 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d105      	bne.n	8003636 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]
  }
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40013400 	.word	0x40013400
 8003658:	40015000 	.word	0x40015000
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800

08003668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f023 030a 	bic.w	r3, r3, #10
 80036a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b087      	sub	sp, #28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f023 0210 	bic.w	r2, r3, #16
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003702:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800373c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	f043 0307 	orr.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	609a      	str	r2, [r3, #8]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800377a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	021a      	lsls	r2, r3, #8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	431a      	orrs	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4313      	orrs	r3, r2
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e074      	b.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a34      	ldr	r2, [pc, #208]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a33      	ldr	r2, [pc, #204]	@ (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a31      	ldr	r2, [pc, #196]	@ (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80037fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800380e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a21      	ldr	r2, [pc, #132]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003838:	d01d      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1f      	ldr	r2, [pc, #124]	@ (80038bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1d      	ldr	r2, [pc, #116]	@ (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1c      	ldr	r2, [pc, #112]	@ (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a18      	ldr	r2, [pc, #96]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a11      	ldr	r2, [pc, #68]	@ (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10c      	bne.n	8003890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800387c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4313      	orrs	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40013400 	.word	0x40013400
 80038b8:	40015000 	.word	0x40015000
 80038bc:	40000400 	.word	0x40000400
 80038c0:	40000800 	.word	0x40000800
 80038c4:	40000c00 	.word	0x40000c00
 80038c8:	40014000 	.word	0x40014000

080038cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e042      	b.n	80039f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fd fadb 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2224      	movs	r2, #36	@ 0x24
 8003986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 ff66 	bl	8004874 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fc67 	bl	800427c <UART_SetConfig>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e01b      	b.n	80039f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 ffe5 	bl	80049b8 <UART_CheckIdleState>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	@ 0x28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d167      	bne.n	8003ae0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Transmit_DMA+0x24>
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e060      	b.n	8003ae2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2221      	movs	r2, #33	@ 0x21
 8003a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d028      	beq.n	8003aa0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a52:	4a26      	ldr	r2, [pc, #152]	@ (8003aec <HAL_UART_Transmit_DMA+0xf4>)
 8003a54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a5a:	4a25      	ldr	r2, [pc, #148]	@ (8003af0 <HAL_UART_Transmit_DMA+0xf8>)
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a62:	4a24      	ldr	r2, [pc, #144]	@ (8003af4 <HAL_UART_Transmit_DMA+0xfc>)
 8003a64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a76:	4619      	mov	r1, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3328      	adds	r3, #40	@ 0x28
 8003a7e:	461a      	mov	r2, r3
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	f7fd fd67 	bl	8001554 <HAL_DMA_Start_IT>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d009      	beq.n	8003aa0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2210      	movs	r2, #16
 8003a90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e020      	b.n	8003ae2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2240      	movs	r2, #64	@ 0x40
 8003aa6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac8:	623a      	str	r2, [r7, #32]
 8003aca:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	69f9      	ldr	r1, [r7, #28]
 8003ace:	6a3a      	ldr	r2, [r7, #32]
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3728      	adds	r7, #40	@ 0x28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	08004e83 	.word	0x08004e83
 8003af0:	08004f1d 	.word	0x08004f1d
 8003af4:	080050a3 	.word	0x080050a3

08003af8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	@ 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d137      	bne.n	8003b80 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_UART_Receive_DMA+0x24>
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e030      	b.n	8003b82 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a18      	ldr	r2, [pc, #96]	@ (8003b8c <HAL_UART_Receive_DMA+0x94>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d01f      	beq.n	8003b70 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d018      	beq.n	8003b70 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	6a3a      	ldr	r2, [r7, #32]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e6      	bne.n	8003b3e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	461a      	mov	r2, r3
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f001 f836 	bl	8004be8 <UART_Start_Receive_DMA>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3728      	adds	r7, #40	@ 0x28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40008000 	.word	0x40008000

08003b90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b0ba      	sub	sp, #232	@ 0xe8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003bba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11b      	bne.n	8003c04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8300 	beq.w	80041fa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
      }
      return;
 8003c02:	e2fa      	b.n	80041fa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8123 	beq.w	8003e54 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003c12:	4b8d      	ldr	r3, [pc, #564]	@ (8003e48 <HAL_UART_IRQHandler+0x2b8>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e4c <HAL_UART_IRQHandler+0x2bc>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8116 	beq.w	8003e54 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d011      	beq.n	8003c58 <HAL_UART_IRQHandler+0xc8>
 8003c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d011      	beq.n	8003c88 <HAL_UART_IRQHandler+0xf8>
 8003c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2202      	movs	r2, #2
 8003c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7e:	f043 0204 	orr.w	r2, r3, #4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d011      	beq.n	8003cb8 <HAL_UART_IRQHandler+0x128>
 8003c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cae:	f043 0202 	orr.w	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003cd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003cd4:	4b5c      	ldr	r3, [pc, #368]	@ (8003e48 <HAL_UART_IRQHandler+0x2b8>)
 8003cd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cea:	f043 0208 	orr.w	r2, r3, #8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d012      	beq.n	8003d26 <HAL_UART_IRQHandler+0x196>
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8266 	beq.w	80041fe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d013      	beq.n	8003d66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7a:	2b40      	cmp	r3, #64	@ 0x40
 8003d7c:	d005      	beq.n	8003d8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d054      	beq.n	8003e34 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f813 	bl	8004db6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b40      	cmp	r3, #64	@ 0x40
 8003d9c:	d146      	bne.n	8003e2c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1d9      	bne.n	8003d9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dfa:	4a15      	ldr	r2, [pc, #84]	@ (8003e50 <HAL_UART_IRQHandler+0x2c0>)
 8003dfc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd fc79 	bl	80016fc <HAL_DMA_Abort_IT>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d019      	beq.n	8003e44 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e22:	e00f      	b.n	8003e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fa13 	bl	8004250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2a:	e00b      	b.n	8003e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fa0f 	bl	8004250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e32:	e007      	b.n	8003e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa0b 	bl	8004250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003e42:	e1dc      	b.n	80041fe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	bf00      	nop
    return;
 8003e46:	e1da      	b.n	80041fe <HAL_UART_IRQHandler+0x66e>
 8003e48:	10000001 	.word	0x10000001
 8003e4c:	04000120 	.word	0x04000120
 8003e50:	08005123 	.word	0x08005123

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	f040 8170 	bne.w	800413e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8169 	beq.w	800413e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8162 	beq.w	800413e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2210      	movs	r2, #16
 8003e80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	2b40      	cmp	r3, #64	@ 0x40
 8003e8e:	f040 80d8 	bne.w	8004042 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80af 	beq.w	8004008 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003eb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	f080 80a7 	bcs.w	8004008 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ec0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 8087 	bne.w	8003fe6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1da      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e1      	bne.n	8003f22 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb4:	f023 0310 	bic.w	r3, r3, #16
 8003fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e4      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd fb32 	bl	800164a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f92f 	bl	8004264 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004006:	e0fc      	b.n	8004202 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800400e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004012:	429a      	cmp	r2, r3
 8004014:	f040 80f5 	bne.w	8004202 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b20      	cmp	r3, #32
 8004028:	f040 80eb 	bne.w	8004202 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f912 	bl	8004264 <HAL_UARTEx_RxEventCallback>
      return;
 8004040:	e0df      	b.n	8004202 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800404e:	b29b      	uxth	r3, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80d1 	beq.w	8004206 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80cc 	beq.w	8004206 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004082:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004090:	647b      	str	r3, [r7, #68]	@ 0x44
 8004092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800409e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e4      	bne.n	800406e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3308      	adds	r3, #8
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	623b      	str	r3, [r7, #32]
   return(result);
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3308      	adds	r3, #8
 80040c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e1      	bne.n	80040a4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	60fb      	str	r3, [r7, #12]
   return(result);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f023 0310 	bic.w	r3, r3, #16
 8004108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	69b9      	ldr	r1, [r7, #24]
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	617b      	str	r3, [r7, #20]
   return(result);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e4      	bne.n	80040f4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f894 	bl	8004264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800413c:	e063      	b.n	8004206 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00e      	beq.n	8004168 <HAL_UART_IRQHandler+0x5d8>
 800414a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800414e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800415e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 f81b 	bl	800519c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004166:	e051      	b.n	800420c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d014      	beq.n	800419e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004190:	2b00      	cmp	r3, #0
 8004192:	d03a      	beq.n	800420a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
    }
    return;
 800419c:	e035      	b.n	800420a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_UART_IRQHandler+0x62e>
 80041aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 ffc5 	bl	8005146 <UART_EndTransmit_IT>
    return;
 80041bc:	e026      	b.n	800420c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_UART_IRQHandler+0x64e>
 80041ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fff4 	bl	80051c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041dc:	e016      	b.n	800420c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d010      	beq.n	800420c <HAL_UART_IRQHandler+0x67c>
 80041ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da0c      	bge.n	800420c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 ffdc 	bl	80051b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041f8:	e008      	b.n	800420c <HAL_UART_IRQHandler+0x67c>
      return;
 80041fa:	bf00      	nop
 80041fc:	e006      	b.n	800420c <HAL_UART_IRQHandler+0x67c>
    return;
 80041fe:	bf00      	nop
 8004200:	e004      	b.n	800420c <HAL_UART_IRQHandler+0x67c>
      return;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <HAL_UART_IRQHandler+0x67c>
      return;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_UART_IRQHandler+0x67c>
    return;
 800420a:	bf00      	nop
  }
}
 800420c:	37e8      	adds	r7, #232	@ 0xe8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop

08004214 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004280:	b08c      	sub	sp, #48	@ 0x30
 8004282:	af00      	add	r7, sp, #0
 8004284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	431a      	orrs	r2, r3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	431a      	orrs	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4baa      	ldr	r3, [pc, #680]	@ (8004554 <UART_SetConfig+0x2d8>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004558 <UART_SetConfig+0x2dc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80042f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004306:	f023 010f 	bic.w	r1, r3, #15
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a90      	ldr	r2, [pc, #576]	@ (800455c <UART_SetConfig+0x2e0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d125      	bne.n	800436c <UART_SetConfig+0xf0>
 8004320:	4b8f      	ldr	r3, [pc, #572]	@ (8004560 <UART_SetConfig+0x2e4>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b03      	cmp	r3, #3
 800432c:	d81a      	bhi.n	8004364 <UART_SetConfig+0xe8>
 800432e:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <UART_SetConfig+0xb8>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	08004345 	.word	0x08004345
 8004338:	08004355 	.word	0x08004355
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800435d 	.word	0x0800435d
 8004344:	2301      	movs	r3, #1
 8004346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434a:	e116      	b.n	800457a <UART_SetConfig+0x2fe>
 800434c:	2302      	movs	r3, #2
 800434e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004352:	e112      	b.n	800457a <UART_SetConfig+0x2fe>
 8004354:	2304      	movs	r3, #4
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435a:	e10e      	b.n	800457a <UART_SetConfig+0x2fe>
 800435c:	2308      	movs	r3, #8
 800435e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004362:	e10a      	b.n	800457a <UART_SetConfig+0x2fe>
 8004364:	2310      	movs	r3, #16
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436a:	e106      	b.n	800457a <UART_SetConfig+0x2fe>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7c      	ldr	r2, [pc, #496]	@ (8004564 <UART_SetConfig+0x2e8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d138      	bne.n	80043e8 <UART_SetConfig+0x16c>
 8004376:	4b7a      	ldr	r3, [pc, #488]	@ (8004560 <UART_SetConfig+0x2e4>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d82d      	bhi.n	80043e0 <UART_SetConfig+0x164>
 8004384:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <UART_SetConfig+0x110>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043e1 	.word	0x080043e1
 8004394:	080043e1 	.word	0x080043e1
 8004398:	080043e1 	.word	0x080043e1
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080043e1 	.word	0x080043e1
 80043a4:	080043e1 	.word	0x080043e1
 80043a8:	080043e1 	.word	0x080043e1
 80043ac:	080043c9 	.word	0x080043c9
 80043b0:	080043e1 	.word	0x080043e1
 80043b4:	080043e1 	.word	0x080043e1
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043d9 	.word	0x080043d9
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c6:	e0d8      	b.n	800457a <UART_SetConfig+0x2fe>
 80043c8:	2302      	movs	r3, #2
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ce:	e0d4      	b.n	800457a <UART_SetConfig+0x2fe>
 80043d0:	2304      	movs	r3, #4
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d6:	e0d0      	b.n	800457a <UART_SetConfig+0x2fe>
 80043d8:	2308      	movs	r3, #8
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043de:	e0cc      	b.n	800457a <UART_SetConfig+0x2fe>
 80043e0:	2310      	movs	r3, #16
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e6:	e0c8      	b.n	800457a <UART_SetConfig+0x2fe>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004568 <UART_SetConfig+0x2ec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d125      	bne.n	800443e <UART_SetConfig+0x1c2>
 80043f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004560 <UART_SetConfig+0x2e4>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043fc:	2b30      	cmp	r3, #48	@ 0x30
 80043fe:	d016      	beq.n	800442e <UART_SetConfig+0x1b2>
 8004400:	2b30      	cmp	r3, #48	@ 0x30
 8004402:	d818      	bhi.n	8004436 <UART_SetConfig+0x1ba>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d00a      	beq.n	800441e <UART_SetConfig+0x1a2>
 8004408:	2b20      	cmp	r3, #32
 800440a:	d814      	bhi.n	8004436 <UART_SetConfig+0x1ba>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <UART_SetConfig+0x19a>
 8004410:	2b10      	cmp	r3, #16
 8004412:	d008      	beq.n	8004426 <UART_SetConfig+0x1aa>
 8004414:	e00f      	b.n	8004436 <UART_SetConfig+0x1ba>
 8004416:	2300      	movs	r3, #0
 8004418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441c:	e0ad      	b.n	800457a <UART_SetConfig+0x2fe>
 800441e:	2302      	movs	r3, #2
 8004420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004424:	e0a9      	b.n	800457a <UART_SetConfig+0x2fe>
 8004426:	2304      	movs	r3, #4
 8004428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442c:	e0a5      	b.n	800457a <UART_SetConfig+0x2fe>
 800442e:	2308      	movs	r3, #8
 8004430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004434:	e0a1      	b.n	800457a <UART_SetConfig+0x2fe>
 8004436:	2310      	movs	r3, #16
 8004438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443c:	e09d      	b.n	800457a <UART_SetConfig+0x2fe>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a4a      	ldr	r2, [pc, #296]	@ (800456c <UART_SetConfig+0x2f0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d125      	bne.n	8004494 <UART_SetConfig+0x218>
 8004448:	4b45      	ldr	r3, [pc, #276]	@ (8004560 <UART_SetConfig+0x2e4>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004452:	2bc0      	cmp	r3, #192	@ 0xc0
 8004454:	d016      	beq.n	8004484 <UART_SetConfig+0x208>
 8004456:	2bc0      	cmp	r3, #192	@ 0xc0
 8004458:	d818      	bhi.n	800448c <UART_SetConfig+0x210>
 800445a:	2b80      	cmp	r3, #128	@ 0x80
 800445c:	d00a      	beq.n	8004474 <UART_SetConfig+0x1f8>
 800445e:	2b80      	cmp	r3, #128	@ 0x80
 8004460:	d814      	bhi.n	800448c <UART_SetConfig+0x210>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <UART_SetConfig+0x1f0>
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d008      	beq.n	800447c <UART_SetConfig+0x200>
 800446a:	e00f      	b.n	800448c <UART_SetConfig+0x210>
 800446c:	2300      	movs	r3, #0
 800446e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004472:	e082      	b.n	800457a <UART_SetConfig+0x2fe>
 8004474:	2302      	movs	r3, #2
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e07e      	b.n	800457a <UART_SetConfig+0x2fe>
 800447c:	2304      	movs	r3, #4
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e07a      	b.n	800457a <UART_SetConfig+0x2fe>
 8004484:	2308      	movs	r3, #8
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e076      	b.n	800457a <UART_SetConfig+0x2fe>
 800448c:	2310      	movs	r3, #16
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e072      	b.n	800457a <UART_SetConfig+0x2fe>
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a35      	ldr	r2, [pc, #212]	@ (8004570 <UART_SetConfig+0x2f4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d12a      	bne.n	80044f4 <UART_SetConfig+0x278>
 800449e:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <UART_SetConfig+0x2e4>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ac:	d01a      	beq.n	80044e4 <UART_SetConfig+0x268>
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b2:	d81b      	bhi.n	80044ec <UART_SetConfig+0x270>
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044b8:	d00c      	beq.n	80044d4 <UART_SetConfig+0x258>
 80044ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044be:	d815      	bhi.n	80044ec <UART_SetConfig+0x270>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <UART_SetConfig+0x250>
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c8:	d008      	beq.n	80044dc <UART_SetConfig+0x260>
 80044ca:	e00f      	b.n	80044ec <UART_SetConfig+0x270>
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d2:	e052      	b.n	800457a <UART_SetConfig+0x2fe>
 80044d4:	2302      	movs	r3, #2
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044da:	e04e      	b.n	800457a <UART_SetConfig+0x2fe>
 80044dc:	2304      	movs	r3, #4
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e2:	e04a      	b.n	800457a <UART_SetConfig+0x2fe>
 80044e4:	2308      	movs	r3, #8
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ea:	e046      	b.n	800457a <UART_SetConfig+0x2fe>
 80044ec:	2310      	movs	r3, #16
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f2:	e042      	b.n	800457a <UART_SetConfig+0x2fe>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a17      	ldr	r2, [pc, #92]	@ (8004558 <UART_SetConfig+0x2dc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d13a      	bne.n	8004574 <UART_SetConfig+0x2f8>
 80044fe:	4b18      	ldr	r3, [pc, #96]	@ (8004560 <UART_SetConfig+0x2e4>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800450c:	d01a      	beq.n	8004544 <UART_SetConfig+0x2c8>
 800450e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004512:	d81b      	bhi.n	800454c <UART_SetConfig+0x2d0>
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004518:	d00c      	beq.n	8004534 <UART_SetConfig+0x2b8>
 800451a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451e:	d815      	bhi.n	800454c <UART_SetConfig+0x2d0>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <UART_SetConfig+0x2b0>
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004528:	d008      	beq.n	800453c <UART_SetConfig+0x2c0>
 800452a:	e00f      	b.n	800454c <UART_SetConfig+0x2d0>
 800452c:	2300      	movs	r3, #0
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004532:	e022      	b.n	800457a <UART_SetConfig+0x2fe>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453a:	e01e      	b.n	800457a <UART_SetConfig+0x2fe>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004542:	e01a      	b.n	800457a <UART_SetConfig+0x2fe>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454a:	e016      	b.n	800457a <UART_SetConfig+0x2fe>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004552:	e012      	b.n	800457a <UART_SetConfig+0x2fe>
 8004554:	cfff69f3 	.word	0xcfff69f3
 8004558:	40008000 	.word	0x40008000
 800455c:	40013800 	.word	0x40013800
 8004560:	40021000 	.word	0x40021000
 8004564:	40004400 	.word	0x40004400
 8004568:	40004800 	.word	0x40004800
 800456c:	40004c00 	.word	0x40004c00
 8004570:	40005000 	.word	0x40005000
 8004574:	2310      	movs	r3, #16
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4aae      	ldr	r2, [pc, #696]	@ (8004838 <UART_SetConfig+0x5bc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	f040 8097 	bne.w	80046b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004586:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800458a:	2b08      	cmp	r3, #8
 800458c:	d823      	bhi.n	80045d6 <UART_SetConfig+0x35a>
 800458e:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <UART_SetConfig+0x318>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045b9 	.word	0x080045b9
 8004598:	080045d7 	.word	0x080045d7
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045c7 	.word	0x080045c7
 80045a8:	080045d7 	.word	0x080045d7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045d7 	.word	0x080045d7
 80045b4:	080045cf 	.word	0x080045cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7fe f984 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 80045bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045be:	e010      	b.n	80045e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c0:	4b9e      	ldr	r3, [pc, #632]	@ (800483c <UART_SetConfig+0x5c0>)
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045c4:	e00d      	b.n	80045e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c6:	f7fe f90f 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80045ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045cc:	e009      	b.n	80045e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045d4:	e005      	b.n	80045e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8130 	beq.w	800484a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	4a94      	ldr	r2, [pc, #592]	@ (8004840 <UART_SetConfig+0x5c4>)
 80045f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f4:	461a      	mov	r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	429a      	cmp	r2, r3
 800460c:	d305      	bcc.n	800461a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	429a      	cmp	r2, r3
 8004618:	d903      	bls.n	8004622 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004620:	e113      	b.n	800484a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	2200      	movs	r2, #0
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	60fa      	str	r2, [r7, #12]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	4a84      	ldr	r2, [pc, #528]	@ (8004840 <UART_SetConfig+0x5c4>)
 8004630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004634:	b29b      	uxth	r3, r3
 8004636:	2200      	movs	r2, #0
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004640:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004644:	f7fb fde8 	bl	8000218 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	020b      	lsls	r3, r1, #8
 800465a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800465e:	0202      	lsls	r2, r0, #8
 8004660:	6979      	ldr	r1, [r7, #20]
 8004662:	6849      	ldr	r1, [r1, #4]
 8004664:	0849      	lsrs	r1, r1, #1
 8004666:	2000      	movs	r0, #0
 8004668:	460c      	mov	r4, r1
 800466a:	4605      	mov	r5, r0
 800466c:	eb12 0804 	adds.w	r8, r2, r4
 8004670:	eb43 0905 	adc.w	r9, r3, r5
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	469a      	mov	sl, r3
 800467c:	4693      	mov	fp, r2
 800467e:	4652      	mov	r2, sl
 8004680:	465b      	mov	r3, fp
 8004682:	4640      	mov	r0, r8
 8004684:	4649      	mov	r1, r9
 8004686:	f7fb fdc7 	bl	8000218 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4613      	mov	r3, r2
 8004690:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004698:	d308      	bcc.n	80046ac <UART_SetConfig+0x430>
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a0:	d204      	bcs.n	80046ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a3a      	ldr	r2, [r7, #32]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	e0ce      	b.n	800484a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046b2:	e0ca      	b.n	800484a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046bc:	d166      	bne.n	800478c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80046be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d827      	bhi.n	8004716 <UART_SetConfig+0x49a>
 80046c6:	a201      	add	r2, pc, #4	@ (adr r2, 80046cc <UART_SetConfig+0x450>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	08004701 	.word	0x08004701
 80046d8:	08004717 	.word	0x08004717
 80046dc:	08004707 	.word	0x08004707
 80046e0:	08004717 	.word	0x08004717
 80046e4:	08004717 	.word	0x08004717
 80046e8:	08004717 	.word	0x08004717
 80046ec:	0800470f 	.word	0x0800470f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7fe f8e8 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 80046f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046f6:	e014      	b.n	8004722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7fe f8fa 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 80046fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046fe:	e010      	b.n	8004722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004700:	4b4e      	ldr	r3, [pc, #312]	@ (800483c <UART_SetConfig+0x5c0>)
 8004702:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004704:	e00d      	b.n	8004722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004706:	f7fe f86f 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 800470a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800470c:	e009      	b.n	8004722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004714:	e005      	b.n	8004722 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004720:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8090 	beq.w	800484a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	4a44      	ldr	r2, [pc, #272]	@ (8004840 <UART_SetConfig+0x5c4>)
 8004730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004734:	461a      	mov	r2, r3
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	fbb3 f3f2 	udiv	r3, r3, r2
 800473c:	005a      	lsls	r2, r3, #1
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	441a      	add	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	fbb2 f3f3 	udiv	r3, r2, r3
 800474e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	2b0f      	cmp	r3, #15
 8004754:	d916      	bls.n	8004784 <UART_SetConfig+0x508>
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475c:	d212      	bcs.n	8004784 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f023 030f 	bic.w	r3, r3, #15
 8004766:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	b29b      	uxth	r3, r3
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	b29a      	uxth	r2, r3
 8004774:	8bfb      	ldrh	r3, [r7, #30]
 8004776:	4313      	orrs	r3, r2
 8004778:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	8bfa      	ldrh	r2, [r7, #30]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	e062      	b.n	800484a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800478a:	e05e      	b.n	800484a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800478c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004790:	2b08      	cmp	r3, #8
 8004792:	d828      	bhi.n	80047e6 <UART_SetConfig+0x56a>
 8004794:	a201      	add	r2, pc, #4	@ (adr r2, 800479c <UART_SetConfig+0x520>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047e7 	.word	0x080047e7
 80047ac:	080047d7 	.word	0x080047d7
 80047b0:	080047e7 	.word	0x080047e7
 80047b4:	080047e7 	.word	0x080047e7
 80047b8:	080047e7 	.word	0x080047e7
 80047bc:	080047df 	.word	0x080047df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fe f880 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047c6:	e014      	b.n	80047f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047c8:	f7fe f892 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 80047cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ce:	e010      	b.n	80047f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d0:	4b1a      	ldr	r3, [pc, #104]	@ (800483c <UART_SetConfig+0x5c0>)
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047d4:	e00d      	b.n	80047f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d6:	f7fe f807 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80047da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047dc:	e009      	b.n	80047f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047e4:	e005      	b.n	80047f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047f0:	bf00      	nop
    }

    if (pclk != 0U)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d028      	beq.n	800484a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	4a10      	ldr	r2, [pc, #64]	@ (8004840 <UART_SetConfig+0x5c4>)
 80047fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004802:	461a      	mov	r2, r3
 8004804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004806:	fbb3 f2f2 	udiv	r2, r3, r2
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	441a      	add	r2, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b0f      	cmp	r3, #15
 8004820:	d910      	bls.n	8004844 <UART_SetConfig+0x5c8>
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004828:	d20c      	bcs.n	8004844 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	b29a      	uxth	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	e009      	b.n	800484a <UART_SetConfig+0x5ce>
 8004836:	bf00      	nop
 8004838:	40008000 	.word	0x40008000
 800483c:	00f42400 	.word	0x00f42400
 8004840:	080054f0 	.word	0x080054f0
      }
      else
      {
        ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2201      	movs	r2, #1
 800484e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2201      	movs	r2, #1
 8004856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2200      	movs	r2, #0
 8004864:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004866:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800486a:	4618      	mov	r0, r3
 800486c:	3730      	adds	r7, #48	@ 0x30
 800486e:	46bd      	mov	sp, r7
 8004870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004972:	d10a      	bne.n	800498a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b098      	sub	sp, #96	@ 0x60
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c8:	f7fc fc00 	bl	80011cc <HAL_GetTick>
 80049cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d12f      	bne.n	8004a3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e4:	2200      	movs	r2, #0
 80049e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f88e 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d022      	beq.n	8004a3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e6      	bne.n	80049f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e063      	b.n	8004b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d149      	bne.n	8004ade <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a52:	2200      	movs	r2, #0
 8004a54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f857 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03c      	beq.n	8004ade <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	623b      	str	r3, [r7, #32]
   return(result);
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e6      	bne.n	8004a64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab6:	61fa      	str	r2, [r7, #28]
 8004ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e012      	b.n	8004b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3758      	adds	r7, #88	@ 0x58
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1c:	e04f      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d04b      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fc fb51 	bl	80011cc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e04e      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d037      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b80      	cmp	r3, #128	@ 0x80
 8004b52:	d034      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b40      	cmp	r3, #64	@ 0x40
 8004b58:	d031      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d110      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f920 	bl	8004db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e029      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b98:	d111      	bne.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f906 	bl	8004db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e00f      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0a0      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b096      	sub	sp, #88	@ 0x58
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	88fa      	ldrh	r2, [r7, #6]
 8004c00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2222      	movs	r2, #34	@ 0x22
 8004c10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02d      	beq.n	8004c7a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c24:	4a40      	ldr	r2, [pc, #256]	@ (8004d28 <UART_Start_Receive_DMA+0x140>)
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d2c <UART_Start_Receive_DMA+0x144>)
 8004c30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c38:	4a3d      	ldr	r2, [pc, #244]	@ (8004d30 <UART_Start_Receive_DMA+0x148>)
 8004c3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c42:	2200      	movs	r2, #0
 8004c44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3324      	adds	r3, #36	@ 0x24
 8004c52:	4619      	mov	r1, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c58:	461a      	mov	r2, r3
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	f7fc fc7a 	bl	8001554 <HAL_DMA_Start_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e051      	b.n	8004d1e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d018      	beq.n	8004cb4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ca2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e6      	bne.n	8004c82 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004cd4:	637a      	str	r2, [r7, #52]	@ 0x34
 8004cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3308      	adds	r3, #8
 8004d06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d08:	623a      	str	r2, [r7, #32]
 8004d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	69f9      	ldr	r1, [r7, #28]
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e5      	bne.n	8004ce8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3758      	adds	r7, #88	@ 0x58
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	08004f39 	.word	0x08004f39
 8004d2c:	08005065 	.word	0x08005065
 8004d30:	080050a3 	.word	0x080050a3

08004d34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b08f      	sub	sp, #60	@ 0x3c
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d5c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e6      	bne.n	8004d3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d8e:	61ba      	str	r2, [r7, #24]
 8004d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e5      	bne.n	8004d6e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004daa:	bf00      	nop
 8004dac:	373c      	adds	r7, #60	@ 0x3c
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b095      	sub	sp, #84	@ 0x54
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004de2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e6      	bne.n	8004dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e3      	bne.n	8004df0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d118      	bne.n	8004e62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f023 0310 	bic.w	r3, r3, #16
 8004e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6979      	ldr	r1, [r7, #20]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e6      	bne.n	8004e30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004e76:	bf00      	nop
 8004e78:	3754      	adds	r7, #84	@ 0x54
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b090      	sub	sp, #64	@ 0x40
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d137      	bne.n	8004f0e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ec6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	617b      	str	r3, [r7, #20]
   return(result);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e6      	bne.n	8004eda <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f0c:	e002      	b.n	8004f14 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004f0e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004f10:	f7ff f980 	bl	8004214 <HAL_UART_TxCpltCallback>
}
 8004f14:	bf00      	nop
 8004f16:	3740      	adds	r7, #64	@ 0x40
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff f97c 	bl	8004228 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b09c      	sub	sp, #112	@ 0x70
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d171      	bne.n	8005038 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e6      	bne.n	8004f5c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004fae:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004fe2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e5      	bne.n	8004fc2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005002:	2b01      	cmp	r3, #1
 8005004:	d118      	bne.n	8005038 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	60fb      	str	r3, [r7, #12]
   return(result);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0310 	bic.w	r3, r3, #16
 800501a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800501c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	69b9      	ldr	r1, [r7, #24]
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	617b      	str	r3, [r7, #20]
   return(result);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800503a:	2200      	movs	r2, #0
 800503c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800504c:	4619      	mov	r1, r3
 800504e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005050:	f7ff f908 	bl	8004264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005054:	e002      	b.n	800505c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005056:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005058:	f7fb fc10 	bl	800087c <HAL_UART_RxCpltCallback>
}
 800505c:	bf00      	nop
 800505e:	3770      	adds	r7, #112	@ 0x70
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d109      	bne.n	8005094 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	b29b      	uxth	r3, r3
 800508a:	4619      	mov	r1, r3
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff f8e9 	bl	8004264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005092:	e002      	b.n	800509a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7ff f8d1 	bl	800423c <HAL_UART_RxHalfCpltCallback>
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b086      	sub	sp, #24
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ca:	2b80      	cmp	r3, #128	@ 0x80
 80050cc:	d109      	bne.n	80050e2 <UART_DMAError+0x40>
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b21      	cmp	r3, #33	@ 0x21
 80050d2:	d106      	bne.n	80050e2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80050dc:	6978      	ldr	r0, [r7, #20]
 80050de:	f7ff fe29 	bl	8004d34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b40      	cmp	r3, #64	@ 0x40
 80050ee:	d109      	bne.n	8005104 <UART_DMAError+0x62>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b22      	cmp	r3, #34	@ 0x22
 80050f4:	d106      	bne.n	8005104 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7ff fe59 	bl	8004db6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510a:	f043 0210 	orr.w	r2, r3, #16
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005114:	6978      	ldr	r0, [r7, #20]
 8005116:	f7ff f89b 	bl	8004250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800511a:	bf00      	nop
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff f889 	bl	8004250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b088      	sub	sp, #32
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	60bb      	str	r3, [r7, #8]
   return(result);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6979      	ldr	r1, [r7, #20]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	613b      	str	r3, [r7, #16]
   return(result);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e6      	bne.n	800514e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff f840 	bl	8004214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005194:	bf00      	nop
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_UARTEx_DisableFifoMode+0x16>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e027      	b.n	800523e <HAL_UARTEx_DisableFifoMode+0x66>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2224      	movs	r2, #36	@ 0x24
 80051fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0201 	bic.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800521c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800525e:	2302      	movs	r3, #2
 8005260:	e02d      	b.n	80052be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2224      	movs	r2, #36	@ 0x24
 800526e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f850 	bl	8005344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052da:	2302      	movs	r3, #2
 80052dc:	e02d      	b.n	800533a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2224      	movs	r2, #36	@ 0x24
 80052ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f812 	bl	8005344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005350:	2b00      	cmp	r3, #0
 8005352:	d108      	bne.n	8005366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005364:	e031      	b.n	80053ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005366:	2308      	movs	r3, #8
 8005368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800536a:	2308      	movs	r3, #8
 800536c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	0e5b      	lsrs	r3, r3, #25
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	0f5b      	lsrs	r3, r3, #29
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800538e:	7bbb      	ldrb	r3, [r7, #14]
 8005390:	7b3a      	ldrb	r2, [r7, #12]
 8005392:	4911      	ldr	r1, [pc, #68]	@ (80053d8 <UARTEx_SetNbDataToProcess+0x94>)
 8005394:	5c8a      	ldrb	r2, [r1, r2]
 8005396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800539a:	7b3a      	ldrb	r2, [r7, #12]
 800539c:	490f      	ldr	r1, [pc, #60]	@ (80053dc <UARTEx_SetNbDataToProcess+0x98>)
 800539e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	7b7a      	ldrb	r2, [r7, #13]
 80053b0:	4909      	ldr	r1, [pc, #36]	@ (80053d8 <UARTEx_SetNbDataToProcess+0x94>)
 80053b2:	5c8a      	ldrb	r2, [r1, r2]
 80053b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053b8:	7b7a      	ldrb	r2, [r7, #13]
 80053ba:	4908      	ldr	r1, [pc, #32]	@ (80053dc <UARTEx_SetNbDataToProcess+0x98>)
 80053bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053be:	fb93 f3f2 	sdiv	r3, r3, r2
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	08005508 	.word	0x08005508
 80053dc:	08005510 	.word	0x08005510

080053e0 <memset>:
 80053e0:	4402      	add	r2, r0
 80053e2:	4603      	mov	r3, r0
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d100      	bne.n	80053ea <memset+0xa>
 80053e8:	4770      	bx	lr
 80053ea:	f803 1b01 	strb.w	r1, [r3], #1
 80053ee:	e7f9      	b.n	80053e4 <memset+0x4>

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005428 <__libc_init_array+0x38>)
 80053f4:	4c0d      	ldr	r4, [pc, #52]	@ (800542c <__libc_init_array+0x3c>)
 80053f6:	1b64      	subs	r4, r4, r5
 80053f8:	10a4      	asrs	r4, r4, #2
 80053fa:	2600      	movs	r6, #0
 80053fc:	42a6      	cmp	r6, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	4d0b      	ldr	r5, [pc, #44]	@ (8005430 <__libc_init_array+0x40>)
 8005402:	4c0c      	ldr	r4, [pc, #48]	@ (8005434 <__libc_init_array+0x44>)
 8005404:	f000 f826 	bl	8005454 <_init>
 8005408:	1b64      	subs	r4, r4, r5
 800540a:	10a4      	asrs	r4, r4, #2
 800540c:	2600      	movs	r6, #0
 800540e:	42a6      	cmp	r6, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f855 3b04 	ldr.w	r3, [r5], #4
 8005418:	4798      	blx	r3
 800541a:	3601      	adds	r6, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005422:	4798      	blx	r3
 8005424:	3601      	adds	r6, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	08005520 	.word	0x08005520
 800542c:	08005520 	.word	0x08005520
 8005430:	08005520 	.word	0x08005520
 8005434:	08005524 	.word	0x08005524

08005438 <memcpy>:
 8005438:	440a      	add	r2, r1
 800543a:	4291      	cmp	r1, r2
 800543c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005440:	d100      	bne.n	8005444 <memcpy+0xc>
 8005442:	4770      	bx	lr
 8005444:	b510      	push	{r4, lr}
 8005446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800544a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800544e:	4291      	cmp	r1, r2
 8005450:	d1f9      	bne.n	8005446 <memcpy+0xe>
 8005452:	bd10      	pop	{r4, pc}

08005454 <_init>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr

08005460 <_fini>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr
